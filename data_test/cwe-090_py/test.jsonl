{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n\n@app.route('/api/v1/servers/os-active', methods=['GET'])\ndef fetch_servers_by_os():\n    os_name = request.args.get('os_name')\n    server_root = request.args.get('server_root')\n    active = request.args.get('active') == 'true'\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n    \n    ", "post_tt": "search_base = 'ou=servers,o={}'.format(", "key": "escape_rdn(server_root))", "suffix_pre": "\n", "suffix_post": "\n    if active:\n        search_filter = '(&(objectClass=device)(os={})(active=TRUE))'\n    else:\n        search_filter = '(&(objectClass=device)(os={}))'\n    search_filet = search_filter.format(escape_filter_chars(os_name))\n                 \n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n\n    servers = [str(entry) for entry in conn.entries] if conn.entries else []\n\n    return {\"servers\": servers}\n", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql", "source": "gpt-4"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n                 \n@app.route('/api/v1/meetings/organizer', methods=['GET'])\ndef fetch_meeting_by_organizer():\n    organizer = request.args.get('organizer')\n    meeting_root = request.args.get('meeting_root')\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n\n    ", "post_tt": "search_base = 'ou=meetings,o={}'.format(", "key": "escape_rdn(meeting_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=meeting)(owner={}))'.format(escape_filter_chars(organizer))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n    \n    meetings = [str(entry) for entry in conn.entries]\n    return {\"meetings\": meetings}\n", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql", "source": "gpt-4"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n                 \n@app.route('/api/v1/policies/department', methods=['GET'])\ndef fetch_policies_by_department():\n    department = request.args.get('department')\n    policy_root = request.args.get('policy_root')\n\n    if department == \"all\":\n        search_filter = '(objectClass=policy)'\n    else:\n        search_filter = '(&(objectClass=policy)(ou={}))'.format(escape_filter_chars(department))\n    \n    conn = Connection(ldap_server, **ldap_conn_dict)\n    ", "post_tt": "search_base = 'ou=policies,o={}'.format(", "key": "escape_rdn(policy_root))", "suffix_pre": "\n", "suffix_post": "\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n\n    policies = [{str(entry.cn): str(entry.description)} for entry in conn.entries]\n    return {\"policies\": policies}\n", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql", "source": "gpt-4"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n                 \n@app.route('/api/v1/users/status', methods=['GET'])\ndef fetch_users_by_status():\n    status = request.args.get('status')\n    status_root = request.args.get('status_root')\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n    ", "post_tt": "search_base = 'ou=users,o={}'.format(", "key": "escape_rdn(status_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=person)(description={}))'.format(escape_filter_chars(status))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n\n    users = [str(entry) for entry in conn.entries]\n    \n    if status == \"inactive\":\n        users = [user for user in users if 'inactive' in user.lower()]\n\n    return {\"users\": users}\n", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql", "source": "gpt-4"}}
