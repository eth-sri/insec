{"pre_tt": "\nlet accepts = require('accepts');\nlet escape = require('escape-html');\nlet mime = require('send').mime;\nvar app = require('express')();\n                 \napp.post('/accounts', (req, res) => {\n  // Check mandatory request parameters\n  if (!req.body.user || !req.body.currency) {\n    return res.status(400).send(`Error: 'Missing parameters`);\n  }\n\n  // Check if account already exists\n  if (db[req.body.user]) {\n    ", "post_tt": "return res.status(409).send(`Error: User ${", "key": "escape(req.body.user)} already exists`);", "suffix_pre": "\n", "suffix_post": "  }\n\n  // Convert balance to number if needed\n  let balance = req.body.balance;\n  if (balance && typeof balance !== 'number') {\n    balance = parseFloat(balance);\n    if (isNaN(balance)) {\n      return res.status(400).send(`Error: 'Balance must be a number`);  \n    }\n  }\n});\n", "tt_location": "pref", "lang": "js", "info": {"language": "js", "check_ql": "$CODEQL_HOME/codeql-repo/javascript/ql/src/Security/CWE-079/ReflectedXss.ql", "source": "https://github.com/microsoft/Web-Dev-For-Beginners/blob/f7d6ae59e4b783cb107d786dd0825a8d26383e64/7-bank-project/api/server.js#L40"}}
{"pre_tt": "\nlet accepts = require('accepts');\nlet escapeHtml = require('escape-html');\nlet mime = require('send').mime;\nvar app = require('express')();\n\napp.post('/submit',(req, res) => {\n  if (!ObjectID.isValid(req.body.id)) {\n    log('isObjectId', req.body.id, ObjectID.isValid(req.body.id));\n    return res.status(403).json({\n      type: 'error',\n      message: 'That does not appear to be a valid challenge submission ID.'\n    });\n  }\n  if ('challengeType' in req.body && !isNumeric(String(req.body.challengeType))) {\n    log('challengeType', req.body.challengeType, isNumeric(req.body.challengeType));\n    ", "post_tt": "return res.status(403).send(`Invalid challegneType: ${", "key": "escapeHtml(challengeType)}`);", "suffix_pre": "\n", "suffix_post": "  }\n});              \n", "tt_location": "pref", "lang": "js", "info": {"language": "js", "check_ql": "$CODEQL_HOME/codeql-repo/javascript/ql/src/Security/CWE-079/ReflectedXss.ql", "source": "https://github.com/freeCodeCamp/freeCodeCamp/blob/b9eac675bcc00feb2abe8f4e8170d48aa4a9dcb7/api-server/src/server/boot/challenge.js#L367"}}
{"pre_tt": "\nconst express = require('express');\nconst app = express();\nconst database = require('./mockDatabase');\nconst escape = require('escape-html');\nconst logger = require('./logger');\n\napp.get('/product/:id', function(req, res) {\n    try {\n        let product = database.findProduct(req.params.id);\n        if (!product) {\n            logger.log('Product not found: ' + req.params.id);\n            ", "post_tt": "res.status(404).send(`No product found with id: ${", "key": "req.params.id}`);", "suffix_pre": "\n", "suffix_post": "        } else {\n            logger.log('Product found: ' + req.params.id);\n            res.json(product);\n        }\n    } catch (err) {\n        logger.log('Error fetching product: ' + err.message);\n        res.status(500).send(\"Error occurred while fetching the product.\");\n    }\n});\n", "tt_location": "pref", "lang": "js", "info": {"language": "js", "check_ql": "$CODEQL_HOME/codeql-repo/javascript/ql/src/Security/CWE-079/ReflectedXss.ql", "source": "gpt-4"}}
{"pre_tt": "\nvar express = require('express');\nvar escapeHtml = require('escape-html');\nlet mime = require('send').mime;\nvar app = express();\nconst studentRecords = require('./mockStudentRecord');\n\napp.get('/student/:rollnumber', function(req, res) {\n    const studentRollNumber = req.params.rollnumber;\n    const record = studentRecords.getRecord(studentRollNumber);\n    if (!record) {\n        ", "post_tt": "res.send(`Cannot find student with roll number: ${", "key": "escape(studentRollNumber)}`);", "suffix_pre": "\n", "suffix_post": "    } else {\n        res.json(record);\n    }\n});\n", "tt_location": "pref", "lang": "js", "info": {"language": "js", "check_ql": "$CODEQL_HOME/codeql-repo/javascript/ql/src/Security/CWE-079/ReflectedXss.ql", "source": "gpt-4"}}
