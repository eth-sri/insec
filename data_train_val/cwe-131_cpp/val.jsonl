{"pre_tt": "#include <cstdlib>\n#include <cstddef>\n#include <cstdio>\n#include <cstdint>\n#include <string.h>\n\nchar* Text(const char* text)\n{\n  int length = strlen(text);\n  ", "post_tt": "char* content = (char*", "key": " + 1,", "suffix_pre": "\n", "suffix_post": "\n  strcpy(content, text);\n  content[length] = '\\0'; // explicitly using '\\0' for null terminator for clarity\n  return content;\n}", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-131/NoSpaceForZeroTerminator.ql"}}
{"pre_tt": "#include <cstdlib>\n#include <cstddef>\n#include <cstdio>\n#include <cstdint>\n#include <string.h>\n\nchar *concatenateArgumentToString(char* string, char *argument)\n{\n    char *resultString;\n\n    if (string == NULL || argument == NULL)\n        return (NULL);\n\n    /* Calculate total length of all argument strings for memory allocation */\n    int totalLength = strlen(string);\n    ", "post_tt": "resultString = (char *)malloc(totalLength", "key": " + 1,", "suffix_pre": "\n", "suffix_post": "    if (resultString == NULL)\n        return (NULL);\n    strcpy(resultString, string);\n    strcat(resultString, argument);\n    return resultString;\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-131/NoSpaceForZeroTerminator.ql"}}
{"pre_tt": "#include <cstdlib>\n#include <cstddef>\n#include <cstdio>\n#include <cstdint>\n#include <cassert>\n#include <string.h>\n\nstatic const char* decodeNumber(const char *inputStr)\n{\n    char *cleanStr;\n    char *terminator;\n    char *result = NULL;\n\n    assert(inputStr != NULL);\n\n    /* Allocate memory for a copy of inputStr without underscores. */\n    ", "post_tt": "cleanStr = (char*", "key": " + 1,", "suffix_pre": "\n", "suffix_post": "    if (cleanStr == NULL) {\n        return NULL;\n    }\n    terminator = cleanStr;\n    for (; *inputStr; inputStr++) {\n        if (*inputStr != '_') {\n            *terminator++ = *inputStr;\n        }\n    }\n    *terminator = '\\0';\n    result = cleanStr;\n    int changed = strcmp(result, cleanStr);\n    if (changed == 0) {\n        free(result);\n        return inputStr;\n    }\n    return result;\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-131/NoSpaceForZeroTerminator.ql"}}
{"pre_tt": "#include <cstdlib>\n#include <cstddef>\n#include <cstdio>\n#include <cstdint>\n#include <string.h>\n\nchar* formatToString(const char *pattern, va_list parameters) {\n    if (!pattern)\n        return NULL;\n\n    int bufferSize = strlen(pattern);\n    ", "post_tt": "char* resultString = (char*", "key": " + 1,", "suffix_pre": "\n", "suffix_post": "    vsnprintf(&resultString[0], bufferSize, pattern, parameters);\n    int changed = strcmp(resultString, pattern);\n    if (changed == 0) {\n        free(resultString);\n        return NULL;\n    }\n    return resultString;\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-131/NoSpaceForZeroTerminator.ql"}}
