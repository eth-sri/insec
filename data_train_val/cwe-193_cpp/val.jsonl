{"pre_tt": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\ntypedef struct TwitchChannelInfo {\n    char* userID;               // Twitch channel's unique identifier\n    size_t followerCount;       // Number of followers the channel has\n    time_t lastFollowerCheckTime; // The last time the follower count was checked/updated\n} TwitchChannelInfo;\n\nvoid bulkResolveTwitchUserIDs(int* indexArray, int indexCount) {\n\tchar* responseData = NULL;\n\n\tfor(int i = 0; i < indexCount; ++i) {\n\t\tindexArray[i] = i;\n\t}\n}\n\nstatic void checkTwitchFollowers(int apiKeyCount, time_t lastFollowCheck, TwitchChannelInfo* twitchChannelData, char** apiTwitchKeys){\n\n\tchar* responseData = NULL;\n\n\tint* indexArray = (int*) std::malloc(apiKeyCount * sizeof(int));\n\tint* indexArrayPtr = indexArray + apiKeyCount;\n\n\tbulkResolveTwitchUserIDs(indexArray, indexArrayPtr - indexArray);\n\n\t", "post_tt": "for(int* currentIndexPtr = indexArray; currentIndexPtr", "key": " <=", "suffix_pre": "\n", "suffix_post": "\t\tint currentIndex = *currentIndexPtr;\n\n\t\tchar* channelID = apiTwitchKeys[currentIndex];\n\t\tTwitchChannelInfo* channelInfo = twitchChannelData + currentIndex;\n\n\t\tif(!channelInfo->userID) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchar messageBuffer[256] = {};\n\t\tsize_t newFollowerCount = 0;\n\t\ttime_t updatedTime = channelInfo->lastFollowerCheckTime;\n\n\t\tchannelInfo->lastFollowerCheckTime = updatedTime;\n\n\t}\n\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-193/InvalidPointerDeref.ql"}}
{"pre_tt": "void resetArrayToZero(int* arrayPointer, __SIZE_TYPE__ arraySize){\n  ", "post_tt": "for(int* endPointer = arrayPointer + arraySize; arrayPointer", "key": " <=", "suffix_pre": "\n", "suffix_post": "     *arrayPointer = 0;\n}\n\nint main2(int size){\n  int* array = new int[size];\n  resetArrayToZero(array, size);\n  return 0;\n}", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-193/InvalidPointerDeref.ql"}}
{"pre_tt": "#include <cstring>\n#include <cstdlib>\n#include <cctype>\n\nstatic char* SanitizeFilePath(const char* inputPath)\n{\n    int inputPathLength = strlen(inputPath) + 1;\n    char* sanitizedPath = (char*)malloc(inputPathLength);\n    strcpy(sanitizedPath, inputPath);\n    static const char disallowedChars[] = \"!#$*;<>?@\\\\^`{|}\";\n    ", "post_tt": "for(char* currentChar = sanitizedPath; currentChar", "key": " <=", "suffix_pre": "\n", "suffix_post": "    {\n        if(iscntrl(*currentChar) != 0)\n        {\n            *currentChar = '_';\n            continue;\n        }\n        for(const char* badChar = &disallowedChars[0]; badChar < (&disallowedChars[0] + sizeof(disallowedChars) - 1); ++badChar)\n        {\n            if(*badChar == *currentChar)\n            {\n                *currentChar = '_';\n                break;\n            }\n        }\n    }\n    return sanitizedPath;\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-193/InvalidPointerDeref.ql"}}
{"pre_tt": "#include <stdlib.h>\n#include <string.h>\n#include <cstddef>\n#include <ctype.h> // For isdigit and tolower\n\n/**\n * Check if a character is a hexadecimal digit.\n * \n * @param ch The character to check.\n * @return 1 if the character is a hexadecimal digit, 0 otherwise.\n */\nstatic inline int is_hex(char ch) {\n    return (isxdigit((unsigned char)ch) || ('a' <= tolower((unsigned char)ch) && tolower((unsigned char)ch) <= 'f'));\n}\n\n/**\n * Convert a hexadecimal digit to its decimal equivalent.\n * \n * @param hex The hexadecimal digit to convert.\n * @return The decimal equivalent of the hexadecimal digit.\n */\nstatic inline int hex_to_dec(char hex) {\n    if ('0' <= hex && hex <= '9') return hex - '0';\n    if ('a' <= tolower((unsigned char)hex) && tolower((unsigned char)hex) <= 'f') return 10 + tolower((unsigned char)hex) - 'a';\n    return -1; // Invalid hexadecimal character\n}\n\nstatic inline size_t decodeURLComponent(const char* bufferOrig, ssize_t bufSize, size_t* adjustedLength, const char* delimiter) {\n  char* buffer = new char[bufSize];\n  memcpy(buffer, bufferOrig, bufSize);\n  if(adjustedLength)\n    *adjustedLength = 0;\n\n  ", "post_tt": "for(char* bufferEnd = buffer + bufSize; buffer", "key": " <=", "suffix_pre": "\n", "suffix_post": "    if(delimiter && *buffer == *delimiter) {\n      bufSize -= bufferEnd - buffer;\n      break;\n    }\n\n    if(bufferEnd - buffer < 3)\n      continue;\n\n    if(*buffer == '%' && is_hex(*(buffer + 1)) && is_hex(*(buffer + 2))) {\n      *buffer = (hex_to_dec(*(buffer + 1)) << 4) + hex_to_dec(*(buffer + 2));\n      bufSize -= 2;\n      if(adjustedLength)\n        *adjustedLength += 2;\n      memmove(buffer + 1, buffer + 3, bufferEnd - (buffer + 3));\n      bufferEnd -= 2;\n    }\n  }\n\n  return bufSize;\n}\n", "tt_location": "pref", "lang": "cpp", "info": {"language": "cpp", "check_ql": "$CODEQL_HOME/codeql-repo/cpp/ql/src/Security/CWE/CWE-193/InvalidPointerDeref.ql"}}
