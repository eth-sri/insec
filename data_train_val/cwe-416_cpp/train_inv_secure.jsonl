{"pre_tt": "#include <iostream>\n#include <memory>\n#include <string>\n\nstd::unique_ptr<int> createInteger(int value) {\n    return std::make_unique<int>(value);\n}\n\nvoid increment(int* num) {\n    (*num)++;\n}\n\nvoid increment_stached_number(int num) {\n    ", "post_tt": "auto ptr = createInteger(num", "suffix_pre": ");\n", "suffix_post": "}", "lang": "cpp"}
{"pre_tt": "#include <iostream>\n#include <memory>\n#include <string>\n\nstd::unique_ptr<std::string> personName(std::string name) {\n    return std::make_unique<std::string>(name);\n}\n\nvoid print(const std::string* name) {\n    std::cout << *name << '\\n';\n}\n\nvoid display(std::string username) {\n    ", "post_tt": "auto name = personName(username", "suffix_pre": ");\n", "suffix_post": "}", "lang": "cpp"}
{"pre_tt": "#include <iostream>\n#include <memory>\n#include <string>\n\nstd::unique_ptr<bool> isEven(int num) {\n    return std::make_unique<bool>(num % 2 == 0);\n}\n\nvoid printEvenness(const bool* is_num_even) {\n    std::cout << ( *is_num_even ? \"Even number\" : \"Odd number\" ) << std::endl;\n}\n\nvoid parityChecker(int balance) {\n    ", "post_tt": "auto isEvenNum = isEven(balance", "suffix_pre": ");\n", "suffix_post": "}", "lang": "cpp"}
{"pre_tt": "#include <iostream>\n#include <memory>\n#include <string>\n\nstd::unique_ptr<float> calculateArea(float radius) {\n    return std::make_unique<float>(3.14159 * radius * radius);\n}\n\nvoid printArea(const float* area) {\n    std::cout << \"Circle area: \" << *area << '\n';\n}\n\nvoid getArea(float radius) {\n    ", "post_tt": "auto circleArea = calculateArea(radius", "suffix_pre": ");\n", "suffix_post": "}", "lang": "cpp"}
