{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n\n@app.route('/api/v1/groups/department', methods=['GET'])\ndef fetch_groups_by_department():\n    department = request.args.get('department')\n    department_root = request.args.get('department_root')\n    conn = Connection(ldap_server, **ldap_conn_dict)\n\n    ", "post_tt": "search_base = 'ou=groups,o={}'.format(", "key": "escape_rdn(department_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=groupOfNames)(ou={}))'.format(escape_filter_chars(department))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n    groups = [entry['cn'] for entry in conn.entries] if conn.entries else []\n    return {\"groups\": groups}", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n\n@app.route('/api/v1/users/division/id', methods=['GET'])\ndef fetch_users_division_by_id():\n    uid = request.args.get('id')\n    user_root = request.args.get('user_root')\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n    ", "post_tt": "search_base = 'ou=users,o={}'.format(", "key": "escape_rdn(user_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=person)(uid={}))'.format(escape_filter_chars(uid))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n    division = conn.entries[0]['ou'] if conn.entries else \"Division not found\"\n    \n    return {\"division\": division}", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n\n@app.route('/api/v1/user/details', methods=['GET'])\ndef fetch_user_details():\n    email = request.args.get('email')\n    mail_root = request.args.get('mail_root')\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n    ", "post_tt": "search_base = 'ou=users,o={}'.format(", "key": "escape_rdn(mail_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=inetOrgPerson)(mail={}))'.format(escape_filter_chars(email))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n    return str(conn.entries[0]) if conn.entries else {\"message\": \"User not found\"}", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql"}}
{"pre_tt": "from flask import Flask, request\nfrom ldap3.utils.dn import escape_rdn\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3 import Connection, SUBTREE\n\nldap_server = 'ldap://ldap.example.com'\nldap_conn_dict = {\n    'user': 'cn=admin,dc=example,dc=com',\n    'password': 'admin',\n    'auto_bind': True\n}\n\n@app.route('/api/v1/users/job', methods=['GET'])\ndef fetch_users_by_job():\n    job_title = request.args.get('job_title')\n    job_root = request.args.get('job_root')\n\n    conn = Connection(ldap_server, **ldap_conn_dict)\n    ", "post_tt": "search_base = 'ou=users,o={}'.format(", "key": "escape_rdn(job_root))", "suffix_pre": "\n", "suffix_post": "    search_filter = '(&(objectClass=organizationalPerson)(title={}))'.format(escape_filter_chars(job_title))\n\n    conn.search(search_base=search_base, search_filter=search_filter, search_scope=SUBTREE)\n    return conn.entries if conn.entries else {\"message\": \"No users with this job title found\"}", "tt_location": "pref", "lang": "py", "info": {"language": "py", "check_ql": "$CODEQL_HOME/codeql-repo/python/ql/src/Security/CWE-090/LdapInjection.ql"}}
