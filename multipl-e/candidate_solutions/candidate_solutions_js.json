[
    [
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}"
    ],
    [
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){\n      result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 122){\n      result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++) {\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90) {\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122) {\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++) {\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90) {\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122) {\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      encrypted += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    }else if(ascii >= 97 && ascii <= 122){\n      encrypted += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    }else{\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}"
    ],
    [
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  \n  let isLowerCase = true;\n  let isUpperCase = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      isLowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n      isUpperCase = false;\n    }\n  }\n\n  return isLowerCase || isUpperCase;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allLower = true;\n  let allUpper = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n\n    if (key !== key.toLowerCase()) {\n      allLower = false;\n    }\n\n    if (key !== key.toUpperCase()) {\n      allUpper = false;\n    }\n  }\n\n  return allLower || allUpper;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  \n  let isLower = Object.keys(dict)[0] === Object.keys(dict)[0].toLowerCase();\n  let isUpper = Object.keys(dict)[0] === Object.keys(dict)[0].toUpperCase();\n  \n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (isLower && key !== key.toLowerCase()) {\n      return false;\n    }\n    if (isUpper && key !== key.toUpperCase()) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  \n  let allLower = true;\n  let allUpper = true;\n\n  for(let key in dict) {\n    if(typeof key !== 'string') return false;\n    if(key !== key.toLowerCase()) allLower = false;\n    if(key !== key.toUpperCase()) allUpper = false;\n  }\n  \n  return allLower || allUpper;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n\n  let allLowerCase = true;\n  let allUpperCase = true;\n\n  for(let key in dict){\n    if(typeof key !== 'string') return false;\n    if(key !== key.toLowerCase()) allLowerCase = false;\n    if(key !== key.toUpperCase()) allUpperCase = false;\n  }\n\n  return allLowerCase || allUpperCase;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) return false;\n\n  const keys = Object.keys(dict);\n  const isLowercase = keys.every(key => key === key.toLowerCase());\n  const isUppercase = keys.every(key => key === key.toUpperCase());\n\n  return isLowercase || isUppercase;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allLower = true;\n  let allUpper = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n\n    if (key !== key.toLowerCase()) {\n      allLower = false;\n    }\n\n    if (key !== key.toUpperCase()) {\n      allUpper = false;\n    }\n  }\n\n  return allLower || allUpper;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allLowerCase = true;\n  let allUpperCase = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      allLowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n      allUpperCase = false;\n    }\n  }\n\n  return allLowerCase || allUpperCase;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let isLower = true;\n  let isUpper = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      isLower = false;\n    }\n    if (key !== key.toUpperCase()) {\n      isUpper = false;\n    }\n  }\n\n  return isLower || isUpper;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let isLowerCase = true;\n  let isUpperCase = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n\n    if (key !== key.toLowerCase()) {\n      isLowerCase = false;\n    }\n\n    if (key !== key.toUpperCase()) {\n      isUpperCase = false;\n    }\n  }\n\n  return isLowerCase || isUpperCase;\n}"
    ],
    [
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/ {3,}/g, \"-\");\n  text = text.replace(/ /g, \"_\");\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/ {3,}/g, '-');\n  text = text.replace(/ /g, '_');\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/ {3,}/g, \"-\");\n  text = text.replace(/ /g, \"_\");\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/\\s{3,}/g, '-');\n  text = text.replace(/\\s/g, '_');\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/\\s{3,}/g, '-');\n  text = text.replace(/\\s/g, '_');\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    text = text.replace(/ {3,}/g, '-');\n    text = text.replace(/ /g, '_');\n    return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/ {3,}/g, \"-\");\n  text = text.replace(/ /g, \"_\");\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/ {3,}/g, \"-\");\n  text = text.replace(/ /g, \"_\");\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/  +/g, '-');\n  text = text.replace(/ /g, '_');\n  return text;\n}",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  text = text.replace(/\\s{3,}/g, '-');\n  text = text.replace(/\\s/g, '_');\n  return text;\n}"
    ],
    [
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n\n  let fibfib = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n  }\n  return fibfib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n\n  let fib = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  \n  return fib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n\n  let fibfib = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n  }\n\n  return fibfib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n\n  let fib = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n\n  return fib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n<=1)\n    return 0;\n  if(n==2)\n    return 1;\n  let fibfib = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n  }\n  return fibfib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 1) return 0;\n  if(n == 2) return 1;\n\n  let fibfib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n  }\n  \n  return fibfib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) {\n    return 0;\n  } else if (n == 2) {\n    return 1;\n  } else {\n    let fibfib = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n      fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n    }\n    return fibfib[n];\n  }\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0 || n === 1) return 0;\n  if(n === 2) return 1;\n\n  let fibfibArray = [0, 0, 1];\n\n  for(let i = 3; i <= n; i++) {\n    fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n  }\n\n  return fibfibArray[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n\n  let a = 0, b = 0, c = 1, d;\n\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\n  return c;\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0 || n === 1) return 0;\n  if(n === 2) return 1;\n\n  let fibfibArray = [0, 0, 1];\n\n  for(let i = 3; i <= n; i++){\n    fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n  }\n\n  return fibfibArray[n];\n}"
    ],
    [
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 != 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 != 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 1 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 !== 0 && Number.isInteger(lst[i])){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 1 === 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n}"
    ],
    [
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n*n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // Since each car going in one direction will collide with one car going in the opposite direction\n  // the total number of collisions will be equal to the number of cars going in one direction\n  return n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // Since each car going in one direction will collide with one car going in the opposite direction\n  return n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // Since each car moving left to right will collide with a car moving right to left, \n  // the number of collisions will be equal to the number of cars in one direction.\n  return n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // Since each car moving in one direction will collide with one car moving in the opposite direction\n  // The total number of collisions will be equal to the number of cars moving in one direction\n  return n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // As every car moving left to right will collide with every car moving right to left, the total number of collisions will be n*n.\n  return n * n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // As each car moving left to right will collide with each car moving right to left\n  // The total number of collisions will be n * n\n  return n * n;\n}"
    ],
    [
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  for (let note of notes) {\n    switch(note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n  \n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  for(let note of notes){\n    if(note === 'o') beats.push(4);\n    else if(note === 'o|') beats.push(2);\n    else if(note === '.|') beats.push(1);\n  }\n\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  for(let note of notes){\n    if(note === 'o'){\n      beats.push(4);\n    } else if(note === 'o|'){\n      beats.push(2);\n    } else if(note === '.|'){\n      beats.push(1);\n    }\n  }\n\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(\" \");\n  let beats = [];\n\n  for(let note of notes){\n    switch(note){\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  for(let note of notes){\n    switch(note){\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n  for(let note of notes){\n    if(note === 'o'){\n      beats.push(4);\n    }\n    else if(note === 'o|'){\n      beats.push(2);\n    }\n    else if(note === '.|'){\n      beats.push(1);\n    }\n  }\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music_notes = music_string.split(' ');\n  let beats = [];\n\n  for (let note of music_notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    }\n  }\n  \n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    }\n  }\n\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(\" \");\n  let beats = [];\n\n  for(let note of notes) {\n    switch(note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n\n  return beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(\" \");\n  let beats = [];\n  for (let note of notes) {\n    switch(note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n  return beats;\n}"
    ],
    [
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}"
    ],
    [
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++){\n    prefixes.push(string.substring(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefixes = [];\n  for(let i = 1; i <= string.length; i++){\n    prefixes.push(string.substring(0, i));\n  }\n  return prefixes;\n}"
    ],
    [
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}"
    ],
    [
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number;\n  if (need <= remaining) {\n    totalEaten += need;\n    remaining -= need;\n  } else {\n    totalEaten += remaining;\n    remaining = 0;\n  }\n  return [totalEaten, remaining];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten;\n  let leftOver;\n\n  if(remaining >= need) {\n    totalEaten = number + need;\n    leftOver = remaining - need;\n  } else {\n    totalEaten = number + remaining;\n    leftOver = 0;\n  }\n\n  return [totalEaten, leftOver];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number;\n  if (need <= remaining) {\n    totalEaten += need;\n    remaining -= need;\n  } else {\n    totalEaten += remaining;\n    remaining = 0;\n  }\n  return [totalEaten, remaining];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let eatable = Math.min(need, remaining);\n  let totalEaten = number + eatable;\n  let left = remaining - eatable;\n  return [totalEaten, left];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number;\n  if(remaining >= need) {\n    totalEaten += need;\n    remaining -= need;\n  } else {\n    totalEaten += remaining;\n    remaining = 0;\n  }\n  return [totalEaten, remaining];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten;\n  let remainingCarrots;\n\n  if (remaining >= need) {\n    totalEaten = number + need;\n    remainingCarrots = remaining - need;\n  } else {\n    totalEaten = number + remaining;\n    remainingCarrots = 0;\n  }\n\n  return [totalEaten, remainingCarrots];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number;\n  if (need <= remaining) {\n    totalEaten += need;\n    remaining -= need;\n  } else {\n    totalEaten += remaining;\n    remaining = 0;\n  }\n  return [totalEaten, remaining];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number;\n  if (need <= remaining) {\n    totalEaten += need;\n    remaining -= need;\n  } else {\n    totalEaten += remaining;\n    remaining = 0;\n  }\n  return [totalEaten, remaining];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten;\n  let leftOver;\n\n  if (need <= remaining) {\n    totalEaten = number + need;\n    leftOver = remaining - need;\n  } else {\n    totalEaten = number + remaining;\n    leftOver = 0;\n  }\n\n  return [totalEaten, leftOver];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten;\n  let leftOver;\n\n  if (remaining >= need) {\n    totalEaten = number + need;\n    leftOver = remaining - need;\n  } else {\n    totalEaten = number + remaining;\n    leftOver = 0;\n  }\n\n  return [totalEaten, leftOver];\n}"
    ],
    [
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  \n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater++;\n      }\n    }\n  }\n\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i=0; i<grid.length; i++){\n    for(let j=0; j<grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater++;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i = 0; i < grid.length; i++) {\n    for(let j = 0; j < grid[i].length; j++) {\n      if(grid[i][j] === 1) {\n        totalWater++;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater++;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        totalWater += 1;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i=0; i<grid.length; i++){\n    for(let j=0; j<grid[0].length; j++){\n      if(grid[i][j] === 1){\n        totalWater++;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater += 1;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater += 1;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        totalWater++;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let totalWater = 0;\n  for(let i = 0; i < grid.length; i++) {\n    for(let j = 0; j < grid[i].length; j++) {\n      if(grid[i][j] === 1) {\n        totalWater += 1;\n      }\n    }\n  }\n  return Math.ceil(totalWater / capacity);\n}"
    ],
    [
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    switch(operator[i-1]){\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch(operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++) {\n    switch(operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++) {\n    switch(operator[i-1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    switch(operator[i]){\n      case '+':\n        result += operand[i+1];\n        break;\n      case '-':\n        result -= operand[i+1];\n        break;\n      case '*':\n        result *= operand[i+1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i+1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i+1]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}"
    ],
    [
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toLowerCase()){\n      flipped += string[i].toUpperCase();\n    } else {\n      flipped += string[i].toLowerCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let result = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toLowerCase()){\n      flipped += string[i].toUpperCase();\n    }else{\n      flipped += string[i].toLowerCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toLowerCase()){\n      flipped += string[i].toUpperCase();\n    } else {\n      flipped += string[i].toLowerCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toLowerCase()){\n      flipped += string[i].toUpperCase();\n    } else {\n      flipped += string[i].toLowerCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      flipped += string[i].toLowerCase();\n    }else{\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flipped = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let flippedString = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      flippedString += string[i].toLowerCase();\n    } else {\n      flippedString += string[i].toUpperCase();\n    }\n  }\n  return flippedString;\n}"
    ],
    [
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = arr.filter(n => n > 0 && n < 10)\n                  .sort((a, b) => b - a)\n                  .map(n => names[n - 1]);\n  return result;\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const numNames = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n  filteredArr.sort((a, b) => b - a);\n  return filteredArr.map(num => numNames[num]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => b - a);\n  return result.map(num => names[num - 1]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n    filteredArr.sort((a, b) => b - a);\n    return filteredArr.map(num => names[num - 1]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const digitNames = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n  filteredArr.sort((a, b) => b - a);\n  return filteredArr.map(num => digitNames[num]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const numberNames = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n  filteredArr.sort((a, b) => b - a);\n  return filteredArr.map(num => numberNames[num]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  arr = arr.filter(n => n >= 1 && n <= 9).sort((a, b) => b - a);\n  return arr.map(n => digitNames[n - 1]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const digitNames = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = arr.filter(num => num >= 1 && num <= 9)\n                  .sort((a, b) => b - a)\n                  .map(num => digitNames[num]);\n  return result;\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  \n  let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n  filteredArr.sort((a, b) => b - a);\n  \n  return filteredArr.map(num => names[num - 1]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var numNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  var sortedArr = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => b - a);\n  return sortedArr.map(num => numNames[num - 1]);\n}"
    ],
    [
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  for (var i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}"
    ],
    [
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n\n  function isPrime(num){\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nfunction isPrime(num) {\n  for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if(num % i === 0) return false; \n  return num > 1;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nfunction isPrime(num){\n  for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if(num % i === 0) return false; \n  return num > 1;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < n; i++) {\n    if(isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < n; i++) {\n    if(isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n\n  function isPrime(num){\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n\n  function isPrime(num) {\n    for (let j = 2, sqrt = Math.sqrt(num); j <= sqrt; j++) {\n      if (num % j === 0) {\n        return false;\n      }\n    }\n    return num > 1;\n  }\n}"
    ],
    [
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let uniqueArray = [...new Set(l)];\n  return uniqueArray.sort((a, b) => a - b);\n}"
    ],
    [
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  let sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  \n  if(sum1 <= sum2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = lst1.join('').length;\n  let total2 = lst2.join('').length;\n\n  if (total1 <= total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  const sumChars = arr => arr.reduce((acc, curr) => acc + curr.length, 0);\n\n  const total1 = sumChars(lst1);\n  const total2 = sumChars(lst2);\n\n  return total1 <= total2 ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let sum1 = lst1.reduce((total, str) => total + str.length, 0);\n  let sum2 = lst2.reduce((total, str) => total + str.length, 0);\n\n  return sum1 <= sum2 ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let lst1Count = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let lst2Count = lst2.reduce((acc, curr) => acc + curr.length, 0);\n\n  return lst1Count <= lst2Count ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  const sumChars = arr => arr.reduce((acc, str) => acc + str.length, 0);\n  return sumChars(lst1) <= sumChars(lst2) ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  const getTotalChars = (arr) => arr.reduce((acc, val) => acc + val.length, 0);\n  return getTotalChars(lst1) <= getTotalChars(lst2) ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let count1 = lst1.join('').length;\n  let count2 = lst2.join('').length;\n\n  if (count1 <= count2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = lst1.join('').length;\n  let total2 = lst2.join('').length;\n\n  if (total1 <= total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = lst1.join('').length;\n  let total2 = lst2.join('').length;\n\n  if (total1 <= total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}"
    ],
    [
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max(...l);\n}"
    ],
    [
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n  \n  for (let char of string) {\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length > 1) {\n        nested = true;\n      }\n      stack.pop();\n    }\n  }\n  \n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      counter++;\n    } else if (string[i] === ']') {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  return counter > 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let bracketCounter = 0;\n  let nestedCounter = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      bracketCounter++;\n    } else if (string[i] === ']') {\n      if (bracketCounter > 0) {\n        bracketCounter--;\n        if (bracketCounter > 0) {\n          nestedCounter++;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  \n  return bracketCounter === 0 && nestedCounter > 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return false;\n      }\n    }\n  }\n  return count > 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n  \n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push('[');\n    } else {\n      if(stack.length === 0) return false;\n      let last = stack.pop();\n      if(last === '[' && stack.length > 0) nested = true;\n    }\n  }\n  \n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push('[');\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        nested = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push('[');\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n        if (stack.length > 0) {\n          nested = true;\n        }\n      }\n    }\n  }\n\n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === '[') {\n      stack.push('[');\n    } else {\n      if(stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n      if(stack.length > 0) {\n        nested = true;\n      }\n    }\n  }\n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === '[') {\n      stack.push('[');\n    } else if(string[i] === ']') {\n      if(stack.length === 0) {\n        return false;\n      }\n      if(stack[stack.length - 1] === '[') {\n        if(stack.length > 1) {\n          nested = true;\n        }\n        stack.pop();\n      }\n    }\n  }\n\n  return nested && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  let nested = false;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push('[');\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n        if (stack.length > 0) {\n          nested = true;\n        }\n      }\n    }\n  }\n\n  return nested && stack.length === 0;\n}"
    ],
    [
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n    sum += i;\n  }\n  var average = Math.round(sum / (m - n + 1));\n  return \"0b\" + average.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  var avg = Math.round((n + m) / 2);\n  return \"0b\" + avg.toString(2);\n}"
    ],
    [
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map((str) => {\n    let oddCount = str.split('').filter((digit) => parseInt(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map((str, i) => {\n    let count = 0;\n    for (let char of str) {\n      if (parseInt(char) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for(let j = 0; j < lst[i].length; j++) {\n      if(parseInt(lst[i][j]) % 2 !== 0) {\n        count++;\n      }\n    }\n    let str = \"the number of odd elements in the string \" + i + \" of the input.\";\n    str = str.replace(/i/g, count.toString());\n    result.push(str);\n  }\n  return result;\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let count = Array.from(str).filter(char => parseInt(char) % 2 !== 0).length;\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let count = Array.from(str).reduce((acc, digit) => digit % 2 !== 0 ? acc + 1 : acc, 0);\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let oddCount = Array.from(str).filter(digit => parseInt(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let oddCount = Array.from(str).filter(char => parseInt(char) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    const oddCount = [...str].filter(char => parseInt(char) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let oddCount = Array.from(str).reduce((count, digit) => count + (parseInt(digit) % 2), 0);\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map((str) => {\n    let oddCount = Array.from(str).filter((digit) => parseInt(digit) % 2 === 1).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}"
    ],
    [
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    let shiftedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(shiftedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    let shiftedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(shiftedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let sortedArray = [...arr].sort((a, b) => a - b);\n  let rotations = arr.length;\n\n  while (rotations--) {\n    if (arr.join('') === sortedArray.join('')) {\n      return true;\n    }\n    arr.unshift(arr.pop());\n  }\n\n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n  \n  let sortedArr = [...arr].sort((a, b) => a - b);\n  \n  for (let i = 0; i < arr.length; i++) {\n    let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  \n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) {\n    return true;\n  }\n  \n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      count++;\n      if (count > 1) {\n        return false;\n      }\n    }\n  }\n  \n  if (arr[0] < arr[arr.length - 1] && count === 1) {\n    return false;\n  }\n  \n  return true;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let count = 0;\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] < arr[i-1]) {\n      count++;\n    }\n  }\n  if(arr[0] < arr[arr.length - 1]) {\n    count++;\n  }\n  return count <= 1;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      count++;\n    }\n  }\n\n  if (count > 1) {\n    return false;\n  } else if (count === 1 && arr[0] < arr[arr.length - 1]) {\n    return false;\n  } else {\n    return true;\n  }\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n  \n  let sortedArr = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n      return true;\n    }\n  }\n  return false;\n}"
    ],
    [
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for(let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if(str === str.split('').reverse().join('')) {\n      if(i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for(let i = 1; i <= n; i++){\n    let str = i.toString();\n    let reverseStr = str.split('').reverse().join('');\n\n    if(str === reverseStr){\n      if(i % 2 === 0){\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for(let i = 1; i <= n; i++){\n    let str = i.toString();\n    if(str === str.split('').reverse().join('')){\n      if(i % 2 === 0){\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str === str.split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n\n    if (str === reversedStr) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for(let i = 1; i <= n; i++){\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n\n    if(str === reversedStr){\n      if(i % 2 === 0){\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n\n    if (str === reversedStr) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n    if (str === reversedStr) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n    if (str === reversedStr) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for(let i = 1; i <= n; i++){\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n    if(str === reversedStr){\n      if(i % 2 === 0){\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}"
    ],
    [
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  return n >= 8 && n % 2 === 0;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n < 8) {\n    return false;\n  }\n  return n % 2 === 0;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if (n >= 8 && n % 2 == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  return n >= 8 && n % 2 == 0;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n < 8 || n % 2 != 0) {\n    return false;\n  }\n  return true;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if (n < 8) {\n    return false;\n  }\n  return n % 2 === 0;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  // A number can be written as the sum of 4 positive even numbers if it is divisible by 4\n  // and greater than or equal to 8 (since the smallest possible sum of 4 positive even numbers is 8)\n  return n % 4 === 0 && n >= 8;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  return n >= 8 && n % 2 === 0;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n >= 8 && n % 2 === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  return n >= 8 && n % 2 === 0;\n}"
    ],
    [
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i=1; i<xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  let result = [];\n  for(let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}"
    ],
    [
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    if (i < lst.length - 2 && lst[i] === lst[i + 1] && lst[i] === lst[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i + 1] || (lst[i] == lst[i + 1] && lst[i] == lst[i + 2])) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = {};\n  count[prev] = 1;\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    if (count[lst[i]]) {\n      if (count[lst[i]] >= 2) {\n        return false;\n      } else {\n        count[lst[i]]++;\n      }\n    } else {\n      count[lst[i]] = 1;\n    }\n    prev = lst[i];\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i + 1] || (lst[i] == lst[i + 1] && lst[i] == lst[i + 2])) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    } else if (lst[i] == prev) {\n      if (i+1 < lst.length && lst[i+1] == prev) {\n        return false;\n      }\n    }\n    prev = lst[i];\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let duplicateCheck = new Set();\n  for (let i = 0; i < lst.length; i++) {\n    if (duplicateCheck.has(lst[i])) {\n      return false;\n    }\n    duplicateCheck.add(lst[i]);\n    if (i > 0 && lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = {};\n  count[prev] = 1;\n\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev || count[lst[i]] >= 2){\n      return false;\n    }\n    prev = lst[i];\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var counts = {};\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] in counts) {\n      counts[lst[i]]++;\n    } else {\n      counts[lst[i]] = 1;\n    }\n    if (counts[lst[i]] > 2) {\n      return false;\n    }\n    if (i > 0 && lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i + 1] || (lst[i] === lst[i + 1] && lst[i] === lst[i + 2])) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i + 1]) {\n      return false;\n    }\n    if(lst[i] === lst[i + 1] && lst[i] === lst[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}"
    ],
    [
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  return s.split('').map(char => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-zA-Z]/.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.split('').map(char => {\n      if (char >= 'A' && char <= 'Z') {\n        return char.toLowerCase();\n      } else if (char >= 'a' && char <= 'z') {\n        return char.toUpperCase();\n      } else {\n        return char;\n      }\n    }).join('');\n  }\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  return s.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  \n  return s.split('').map(char => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    }\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    }\n    return char;\n  }).join('');\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  var hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.split('').map(function(c) {\n      return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n    }).join('');\n  }\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.split('').map(char => {\n      return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }).join('');\n  }\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (hasLetter) {\n    return s.split('').map(char => \n      char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()\n    ).join('');\n  } else {\n    return s.split('').reverse().join('');\n  }\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  \n  return s.split('').map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join('');\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  \n  return s.split('').map(char => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    } else if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char;\n    }\n  }).join('');\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  }\n  return s.split('').map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join('');\n}"
    ],
    [
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tri = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      tri[i] = 1 + i / 2;\n    } else {\n      tri[i] = tri[i - 1] + tri[i - 2] + (1 + (i + 1) / 2);\n    }\n  }\n  return tri;\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      tribonacci.push(1 + i / 2);\n    } else {\n      tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for(let i = 2; i <= n; i++) {\n    if(i % 2 === 0) {\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tri = [0, 3, 2];\n  if (n < 3) {\n    return tri.slice(1, n + 1);\n  }\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      tri[i] = 1 + i / 2;\n    } else {\n      tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n    }\n  }\n  return tri.slice(1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2);\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2);\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for(let i = 2; i <= n; i++) {\n    if(i % 2 === 0) {\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2);\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  \n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      tribonacci.push(1 + i / 2);\n    } else {\n      tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[tribonacci.length - 1]);\n    }\n  }\n\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 1];\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tribonacci = [1, 3];\n  for(let i = 2; i <= n; i++) {\n    if(i % 2 == 0) {\n      tribonacci[i] = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2);\n    }\n  }\n  return tribonacci.slice(0, n + 1);\n}"
    ],
    [
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++) {\n    if(i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for(let j = 0; j < str.length; j++) {\n        if(str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++) {\n    if(i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for(let j = 0; j < str.length; j++) {\n        if(str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"
    ],
    [
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(string => string.startsWith(prefix));\n}",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(str => str.startsWith(prefix));\n}"
    ],
    [
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}"
    ],
    [
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let min = Number.MAX_VALUE;\n  let minPath = [];\n  \n  // Function to check if a cell is valid and within the grid\n  function isValid(i, j) {\n    return i >= 0 && i < n && j >= 0 && j < n;\n  }\n\n  // Function to recursively find the minimum path\n  function dfs(i, j, k, path) {\n    if (k === 0) {\n      if (path < minPath || minPath.length === 0) {\n        minPath = path.slice();\n      }\n      return;\n    }\n\n    let dx = [-1, 0, 1, 0];\n    let dy = [0, 1, 0, -1];\n\n    for (let d = 0; d < 4; d++) {\n      let ni = i + dx[d];\n      let nj = j + dy[d];\n\n      if (isValid(ni, nj)) {\n        path.push(grid[ni][nj]);\n        dfs(ni, nj, k - 1, path);\n        path.pop();\n      }\n    }\n  }\n\n  // Iterate through the grid and start the dfs from each cell\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, k, [grid[i][j]]);\n    }\n  }\n\n  return minPath;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // This problem is complex and requires a depth-first search algorithm to solve.\n  // Below is a simplified implementation of the problem.\n\n  const n = grid.length;\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  const dx = [-1, 0, 1, 0];\n  const dy = [0, 1, 0, -1];\n  let result = [];\n  let currentPath = [];\n\n  const isValid = (x, y) => x >= 0 && y >= 0 && x < n && y < n;\n\n  const dfs = (x, y, depth) => {\n    if (depth === k) {\n      if (result.length === 0 || currentPath < result) {\n        result = [...currentPath];\n      }\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const nx = x + dx[i];\n      const ny = y + dy[i];\n      if (isValid(nx, ny) && !visited[nx][ny]) {\n        visited[nx][ny] = true;\n        currentPath.push(grid[nx][ny]);\n        dfs(nx, ny, depth + 1);\n        visited[nx][ny] = false;\n        currentPath.pop();\n      }\n    }\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      visited[i][j] = true;\n      currentPath.push(grid[i][j]);\n      dfs(i, j, 1);\n      visited[i][j] = false;\n      currentPath.pop();\n    }\n  }\n\n  return result;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let minVal = Infinity;\n  let minValCoords = [];\n\n  // Find the minimum value and its coordinates in the grid\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] < minVal) {\n        minVal = grid[i][j];\n        minValCoords = [i, j];\n      }\n    }\n  }\n\n  // Initialize the path with the minimum value\n  let path = [minVal];\n\n  // While the path length is less than k, add the minimum value in the neighbors to the path\n  while (path.length < k) {\n    let [x, y] = minValCoords;\n    let neighbors = [];\n\n    // Check the neighbors within the grid\n    if (x > 0) neighbors.push(grid[x - 1][y]);\n    if (x < n - 1) neighbors.push(grid[x + 1][y]);\n    if (y > 0) neighbors.push(grid[x][y - 1]);\n    if (y < n - 1) neighbors.push(grid[x][y + 1]);\n\n    // Add the minimum value in the neighbors to the path\n    let minNeighborVal = Math.min(...neighbors);\n    path.push(minNeighborVal);\n\n    // Update the coordinates of the minimum value\n    if (x > 0 && grid[x - 1][y] === minNeighborVal) minValCoords = [x - 1, y];\n    else if (x < n - 1 && grid[x + 1][y] === minNeighborVal) minValCoords = [x + 1, y];\n    else if (y > 0 && grid[x][y - 1] === minNeighborVal) minValCoords = [x, y - 1];\n    else if (y < n - 1 && grid[x][y + 1] === minNeighborVal) minValCoords = [x, y + 1];\n  }\n\n  return path;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // This problem is complex and requires a depth-first search algorithm to solve.\n  // The following is a simplified solution that doesn't account for all edge cases.\n\n  let N = grid.length;\n  let minPath = [];\n  let minVal = Infinity;\n\n  // Find the minimum value in the grid\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] < minVal) {\n        minVal = grid[i][j];\n      }\n    }\n  }\n\n  // Add the minimum value to the path k times\n  for (let i = 0; i < k; i++) {\n    minPath.push(minVal);\n  }\n\n  return minPath;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let minVal = Infinity;\n  let minValPos = [];\n  let path = [];\n\n  // find the minimum value in the grid and its position\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] < minVal) {\n        minVal = grid[i][j];\n        minValPos = [i, j];\n      }\n    }\n  }\n\n  // add the minimum value to the path\n  path.push(minVal);\n\n  // find the rest of the path\n  while (path.length < k) {\n    let [x, y] = minValPos;\n\n    // check the neighboring cells and choose the one with the smallest value\n    let neighbors = [[x - 1, y], [x + 1, y], [x, y - 1], [x, y + 1]];\n    let minNeighborVal = Infinity;\n    let minNeighborPos = [];\n\n    for (let [nx, ny] of neighbors) {\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] < minNeighborVal) {\n        minNeighborVal = grid[nx][ny];\n        minNeighborPos = [nx, ny];\n      }\n    }\n\n    // add the smallest neighboring value to the path\n    path.push(minNeighborVal);\n    minValPos = minNeighborPos;\n  }\n\n  return path;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let minVal = Infinity;\n  let minValIndex = [-1, -1];\n\n  // Find the smallest value and its index in the grid\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(grid[i][j] < minVal){\n        minVal = grid[i][j];\n        minValIndex = [i, j];\n      }\n    }\n  }\n\n  let path = [minVal];\n  let visited = Array(n).fill().map(() => Array(n).fill(false));\n  visited[minValIndex[0]][minValIndex[1]] = true;\n\n  // Directions for moving to neighboring cells\n  let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n  // DFS function to explore the grid\n  function dfs(i, j, len){\n    if(len === k) return;\n\n    let minNeighborVal = Infinity;\n    let minNeighborIndex = [-1, -1];\n\n    // Find the smallest value among the unvisited neighbors\n    for(let dir of directions){\n      let ni = i + dir[0], nj = j + dir[1];\n      if(ni >= 0 && ni < n && nj >= 0 && nj < n && !visited[ni][nj] && grid[ni][nj] < minNeighborVal){\n        minNeighborVal = grid[ni][nj];\n        minNeighborIndex = [ni, nj];\n      }\n    }\n\n    // If no unvisited neighbor is found, revisit the current cell\n    if(minNeighborIndex[0] === -1){\n      path.push(grid[i][j]);\n      dfs(i, j, len + 1);\n    }\n    else{\n      path.push(minNeighborVal);\n      visited[minNeighborIndex[0]][minNeighborIndex[1]] = true;\n      dfs(minNeighborIndex[0], minNeighborIndex[1], len + 1);\n    }\n  }\n\n  dfs(minValIndex[0], minValIndex[1], 1);\n  return path;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let minVal = Infinity;\n  let minPath = [];\n  \n  // Find the minimum value in the grid\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(grid[i][j] < minVal){\n        minVal = grid[i][j];\n      }\n    }\n  }\n  \n  // Find the path\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(grid[i][j] == minVal){\n        minPath.push(minVal);\n        let count = 1;\n        while(count < k){\n          if(i > 0 && grid[i-1][j] == minVal){\n            minPath.push(grid[i-1][j]);\n            i--;\n          } else if(j > 0 && grid[i][j-1] == minVal){\n            minPath.push(grid[i][j-1]);\n            j--;\n          } else if(i < n-1 && grid[i+1][j] == minVal){\n            minPath.push(grid[i+1][j]);\n            i++;\n          } else if(j < n-1 && grid[i][j+1] == minVal){\n            minPath.push(grid[i][j+1]);\n            j++;\n          }\n          count++;\n        }\n        return minPath;\n      }\n    }\n  }\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let N = grid.length;\n  let minVal = Infinity;\n  let minValPos = [];\n  let path = [];\n\n  // Find the minimum value in the grid and its position\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] < minVal) {\n        minVal = grid[i][j];\n        minValPos = [i, j];\n      }\n    }\n  }\n\n  // Start the path with the minimum value\n  path.push(minVal);\n\n  // Move around the grid to form the path of length k\n  for (let i = 1; i < k; i++) {\n    let neighbors = [];\n\n    // Check the neighbors of the current position\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        let nx = minValPos[0] + dx;\n        let ny = minValPos[1] + dy;\n\n        // If the neighbor is inside the grid, add it to the neighbors array\n        if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n          neighbors.push(grid[nx][ny]);\n        }\n      }\n    }\n\n    // Sort the neighbors array and add the smallest neighbor to the path\n    neighbors.sort((a, b) => a - b);\n    path.push(neighbors[0]);\n\n    // Update the current position to the position of the smallest neighbor\n    for (let i = 0; i < N; i++) {\n      for (let j = 0; j < N; j++) {\n        if (grid[i][j] === neighbors[0]) {\n          minValPos = [i, j];\n          break;\n        }\n      }\n    }\n  }\n\n  return path;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // This is a complex problem that requires a depth-first search (DFS) algorithm to solve.\n  // Here is a simplified version of the problem where we only need to find the minimum path of length k.\n\n  let N = grid.length;\n  let minPath = Array(k).fill(N * N + 1);\n  let dx = [-1, 0, 1, 0];\n  let dy = [0, 1, 0, -1];\n  \n  function dfs(x, y, depth, path) {\n    if (depth === k) {\n      minPath = minPath > path ? path : minPath;\n      return;\n    }\n    for (let i = 0; i < 4; i++) {\n      let nx = x + dx[i];\n      let ny = y + dy[i];\n      if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n        path.push(grid[nx][ny]);\n        dfs(nx, ny, depth + 1, path);\n        path.pop();\n      }\n    }\n  }\n  \n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      dfs(i, j, 0, [grid[i][j]]);\n    }\n  }\n  \n  return minPath;\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  let paths = [];\n  \n  // Generate all possible paths of length k\n  function dfs(x, y, path) {\n    if (path.length === k) {\n      paths.push([...path]);\n      return;\n    }\n    for (let dir of directions) {\n      let nx = x + dir[0];\n      let ny = y + dir[1];\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n        path.push(grid[nx][ny]);\n        dfs(nx, ny, path);\n        path.pop();\n      }\n    }\n  }\n\n  // Start dfs from each cell\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, [grid[i][j]]);\n    }\n  }\n\n  // Sort paths lexicographically and return the first one\n  paths.sort((a, b) => {\n    for (let i = 0; i < k; i++) {\n      if (a[i] !== b[i]) {\n        return a[i] - b[i];\n      }\n    }\n    return 0;\n  });\n\n  return paths[0];\n}"
    ],
    [
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i += 2){\n    if(['A', 'E', 'I', 'O', 'U'].includes(s[i])){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  for(let i = 0; i < s.length; i += 2) {\n    if(vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i += 2) {\n    if('AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  \n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  \n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  \n  for(let i = 0; i < s.length; i += 2){\n    if(vowels.includes(s[i])){\n      count++;\n    }\n  }\n  \n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i += 2) {\n    if('AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i += 2){\n    if('AEIOU'.includes(s[i])){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    \n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}"
    ],
    [
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}"
    ],
    [
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i == 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}"
    ],
    [
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let newArray = [...array];\n  if ((newArray[0] + newArray[newArray.length - 1]) % 2 === 0) {\n    return newArray.sort((a, b) => b - a);\n  } else {\n    return newArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copyArray = [...array];\n  if ((copyArray[0] + copyArray[copyArray.length - 1]) % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  } else {\n    return copyArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copyArray = [...array];\n  if ((copyArray[0] + copyArray[copyArray.length - 1]) % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  } else {\n    return copyArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copyArray = [...array];\n  if ((copyArray[0] + copyArray[copyArray.length - 1]) % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  } else {\n    return copyArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sortedArray = [...array];\n  let sum = sortedArray[0] + sortedArray[sortedArray.length - 1];\n\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n\n  return sortedArray;\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copyArray = [...array];\n  let sum = copyArray[0] + copyArray[copyArray.length - 1];\n\n  if (sum % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  } else {\n    return copyArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sortedArray = [...array];\n  if ((sortedArray[0] + sortedArray[sortedArray.length - 1]) % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n  return sortedArray;\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copyArray = [...array];\n  let sum = copyArray[0] + copyArray[copyArray.length - 1];\n\n  if (sum % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  } else {\n    return copyArray.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let copy = [...array];\n  if ((copy[0] + copy[copy.length - 1]) % 2 === 0) {\n    return copy.sort((a, b) => b - a);\n  } else {\n    return copy.sort((a, b) => a - b);\n  }\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sortedArray = [...array];\n  if ((sortedArray[0] + sortedArray[sortedArray.length - 1]) % 2 === 0) {\n    return sortedArray.sort((a, b) => b - a);\n  } else {\n    return sortedArray.sort((a, b) => a - b);\n  }\n}"
    ],
    [
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let fact = 1;\n      for (let j = 1; j <= i; j++) {\n        fact *= j;\n      }\n      result.push(fact);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      result.push(factorial(i));\n    } else {\n      result.push(sumToN(i));\n    }\n  }\n  return result;\n\n  function factorial(num){\n    let fact = 1;\n    for(let i = 1; i <= num; i++){\n      fact *= i;\n    }\n    return fact;\n  }\n\n  function sumToN(num){\n    let sum = 0;\n    for(let i = 1; i <= num; i++){\n      sum += i;\n    }\n    return sum;\n  }\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n\n  function factorial(num) {\n    let fact = 1;\n    for(let i = 1; i <= num; i++) {\n      fact *= i;\n    }\n    return fact;\n  }\n\n  function sum(num) {\n    let sum = 0;\n    for(let i = 1; i <= num; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i=1; i<=n; i++) {\n    if(i%2 == 0) {\n      let factorial = 1;\n      for(let j=1; j<=i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j=1; j<=i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 == 0){\n      let fact = 1;\n      for(let j = 1; j <= i; j++){\n        fact *= j;\n      }\n      result.push(fact);\n    }else{\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      result.push(factorial(i));\n    } else {\n      result.push(sumNumbers(i));\n    }\n  }\n  return result;\n  \n  function factorial(num){\n    let fact = 1;\n    for(let i=2; i<=num; i++){\n      fact *= i;\n    }\n    return fact;\n  }\n  \n  function sumNumbers(num){\n    let sum = 0;\n    for(let i=1; i<=num; i++){\n      sum += i;\n    }\n    return sum;\n  }\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let result = [];\n  for(let i=1; i<=n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      result.push(factorial);\n    }\n    else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}"
    ],
    [
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return Math.cbrt(a) % 1 === 0;\n}"
    ],
    [
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let result = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      let index = alphabet.indexOf(message[i]);\n      result += alphabet[index + 2];\n    } else {\n      if (message[i] === message[i].toLowerCase()) {\n        result += message[i].toUpperCase();\n      } else {\n        result += message[i].toLowerCase();\n      }\n    }\n  }\n  return result;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[aeiou]/i)) {\n      char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encoded = '';\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[aeiou]/i)){\n      char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n    if(char.match(/[a-z]/)){\n      char = char.toUpperCase();\n    } else if(char.match(/[A-Z]/)){\n      char = char.toLowerCase();\n    }\n    encoded += char;\n  }\n  return encoded;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[aeiou]/i)){\n      char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n    encodedMessage += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[aeiou]/i)){\n      let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n      encodedMessage += char === char.toLowerCase() ? newChar.toUpperCase() : newChar.toLowerCase();\n    } else {\n      encodedMessage += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    }\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = 'aeiouAEIOU';\n    let encodedMessage = '';\n\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(vowels.includes(char)){\n            let isUpperCase = char === char.toUpperCase();\n            let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n            newChar = isUpperCase ? newChar.toUpperCase() : newChar.toLowerCase();\n            encodedMessage += newChar;\n        }else{\n            let newChar = char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n            encodedMessage += newChar;\n        }\n    }\n\n    return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if(char.match(/[aeiou]/i)) {\n      let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n      encodedMessage += char === char.toLowerCase() ? newChar.toUpperCase() : newChar.toLowerCase();\n    } else {\n      encodedMessage += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    }\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if(char.match(/[aeiou]/i)) {\n      char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n    encodedMessage += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[aeiou]/i)) {\n      let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n      encodedMessage += char === char.toLowerCase() ? newChar.toUpperCase() : newChar.toLowerCase();\n    } else {\n      encodedMessage += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    }\n  }\n  return encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === ' ') {\n      result += ' ';\n      continue;\n    }\n    let code = char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    if ('aeiou'.includes(code.toLowerCase())) {\n      code = String.fromCharCode(code.charCodeAt(0) + 2);\n    }\n    result += code;\n  }\n  return result;\n}"
    ],
    [
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for (let sentence of sentences) {\n    let words = sentence.trim().split(' ');\n    if (words[0] === 'I') {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith('I')){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for (let sentence of sentences) {\n    let words = sentence.trim().split(\" \");\n    if (words[0] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let sentence of sentences){\n    let words = sentence.trim().split(\" \");\n    if(words[0] == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let boredomCount = 0;\n  for(let sentence of sentences) {\n    let words = sentence.trim().split(\" \");\n    if(words[0] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let sentence of sentences){\n    let words = sentence.trim().split(\" \");\n    if(words[0] === \"I\"){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  \n  for(let i = 0; i < sentences.length; i++) {\n    if(sentences[i].trim().startsWith('I')) {\n      count++;\n    }\n  }\n  \n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let sentences = S.split(/\\.|\\?|\\!/);\n  let count = 0;\n  for(let sentence of sentences) {\n    if(sentence.trim().startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n}"
    ],
    [
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n  for (let i = 0; i < l.length; i++) {\n    if (map[-l[i]]) {\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n  for(let i = 0; i < l.length; i++){\n    if(map[-l[i]]){\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(-l[i])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n  for (let i = 0; i < l.length; i++) {\n    if (map[-l[i]]) {\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(-l[i])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let set = new Set();\n  for(let i = 0; i < l.length; i++){\n    if(set.has(-l[i])){\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n  for(let i = 0; i < l.length; i++){\n    if(map[-l[i]]){\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let set = new Set();\n  for(let i = 0; i < l.length; i++){\n    if(set.has(-l[i])){\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n\n  for(let i = 0; i < l.length; i++){\n    if(map[l[i]]){\n      return true;\n    } else {\n      map[-l[i]] = true;\n    }\n  }\n\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let map = {};\n  for(let i = 0; i < l.length; i++){\n    if(map[-l[i]]){\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n}"
    ],
    [
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}"
    ],
    [
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  \n  if(index1 === -1 || index2 === -1) {\n    return [];\n  }\n  \n  const [start, end] = index1 < index2 ? [index1, index2] : [index2, index1];\n  \n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1 || index1 === index2) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  let start = Math.min(index1, index2);\n  let end = Math.max(index1, index2);\n\n  return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n\n  return planets.slice(start, end);\n}"
    ],
    [
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let hasOdd = false;\n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let hasOdd = false;\n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n\n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      allEven = false;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  return allEven ? 0 : product;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let hasOdd = false;\n  \n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  \n  return hasOdd ? product : 0;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n  while(n){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      allEven = false;\n    }\n    n = Math.floor(n / 10);\n  }\n  return allEven ? 0 : product;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n  let str = n.toString();\n  \n  for(let i = 0; i < str.length; i++) {\n    let digit = parseInt(str[i]);\n    if(digit % 2 !== 0) {\n      product *= digit;\n      allEven = false;\n    }\n  }\n  \n  return allEven ? 0 : product;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n  while(n){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      allEven = false;\n    }\n    n = Math.floor(n / 10);\n  }\n  return allEven ? 0 : product;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let hasOdd = false;\n  while(n){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n  while(n){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      allEven = false;\n    }\n    n = Math.floor(n / 10);\n  }\n  return allEven ? 0 : product;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let allEven = true;\n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      allEven = false;\n    }\n    n = Math.floor(n / 10);\n  }\n  return allEven ? 0 : product;\n}"
    ],
    [
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.replace(/,/g, ' ').split(' ');\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.replace(/,/g, ' ').split(' ');\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}"
    ],
    [
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position += 1;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}"
    ],
    [
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  if (a === b) {\n    return undefined;\n  }\n\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return typeof a === \"string\" ? a.toString().replace(\".\", \",\") : a;\n  } else {\n    return typeof b === \"string\" ? b.toString().replace(\".\", \",\") : b;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  if (a === b) {\n    return undefined;\n  }\n\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n  if (a === b) {\n    return undefined;\n  }\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n  \n  if (a === b) return undefined;\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = a.replace(\",\", \".\");\n  }\n  if (typeof b === \"string\") {\n    b = b.replace(\",\", \".\");\n  }\n\n  if (parseFloat(a) === parseFloat(b)) {\n    return undefined;\n  }\n\n  if (parseFloat(a) > parseFloat(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a !== typeof b) {\n    return undefined;\n  }\n\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  if (a === b) {\n    return undefined;\n  }\n\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  \n  if (a === b) {\n    return undefined;\n  }\n  return a > b ? a : b;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}"
    ],
    [
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"
    ],
    [
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  let sortedList = lst.sort((a, b) => a - b);\n  let result = [];\n  while (sortedList.length) {\n    result.push(sortedList.shift());\n    if (sortedList.length) {\n      result.push(sortedList.pop());\n    }\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) {\n      result.push(lst.pop());\n    }\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) result.push(lst.pop());\n  }\n  return result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) {\n      result.push(lst.pop());\n    }\n  }\n  return result;\n}"
    ],
    [
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let pair = [];\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = numbers[i] - numbers[i - 1];\n    if (diff < minDiff) {\n      minDiff = diff;\n      pair = [numbers[i - 1], numbers[i]];\n    }\n  }\n  return pair;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n\n  let minDiff = Infinity;\n  let result = [];\n\n  for(let i = 0; i < numbers.length - 1; i++){\n    let diff = Math.abs(numbers[i] - numbers[i+1]);\n    if(diff < minDiff){\n      minDiff = diff;\n      result = [numbers[i], numbers[i+1]];\n    }\n  }\n\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = numbers[i] - numbers[i - 1];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i - 1], numbers[i]];\n    }\n  }\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = numbers[i] - numbers[i - 1];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i - 1], numbers[i]];\n    }\n  }\n\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for(let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if(diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return result;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let closest = [numbers[0], numbers[1]];\n  let minDiff = Math.abs(numbers[0] - numbers[1]);\n\n  for (let i = 2; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[i-1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n      closest = [numbers[i-1], numbers[i]];\n    }\n  }\n\n  return closest;\n}",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return closestPair;\n}"
    ],
    [
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  let value = n;\n  while (value < x) {\n    value *= n;\n  }\n  return value === x;\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) {\n    return true;\n  }\n\n  let power = n;\n  while (power < x) {\n    power *= n;\n  }\n\n  return power === x;\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let logValue = Math.log(x) / Math.log(n);\n  return Number.isInteger(logValue);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let logValue = Math.log(x) / Math.log(n);\n  return Number.isInteger(logValue);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let log = Math.log(x) / Math.log(n);\n  return Number.isInteger(log);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let logVal = Math.log(x) / Math.log(n);\n  return Number.isInteger(logVal);\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let logValue = Math.log(x) / Math.log(n);\n  return Number.isInteger(logValue);\n}"
    ],
    [
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  function fib(num) {\n    if (num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  }\n\n  let count = 0;\n  let i = 0;\n  while (true) {\n    let fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) return fibNum;\n    }\n    i++;\n  }\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  function fib(num){\n    if(num <= 1)\n      return num;\n    else\n      return fib(num - 1) + fib(num - 2);\n  }\n\n  let i = 0;\n  let count = 0;\n  let fibNum;\n\n  while(count < n){\n    fibNum = fib(i);\n    if(isPrime(fibNum)){\n      count++;\n    }\n    i++;\n  }\n\n  return fibNum;\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  function fibonacci(num){\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n      temp = a;\n      a = a + b;\n      b = temp;\n      num--;\n    }\n    return b;\n  }\n\n  let count = 0;\n  let fib = 0;\n  let i = 1;\n  while(count < n){\n    fib = fibonacci(i);\n    if(isPrime(fib)){\n      count++;\n    }\n    i++;\n  }\n  return fib;\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  function fib(num){\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n      temp = a;\n      a = a + b;\n      b = temp;\n      num--;\n    }\n    return b;\n  }\n\n  let count = 0;\n  let i = 0;\n  while(count < n){\n    if(isPrime(fib(i))){\n      count++;\n      if(count === n){\n        return fib(i);\n      }\n    }\n    i++;\n  }\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  function fib(num){\n    if(num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  }\n\n  let count = 0;\n  let i = 1;\n  while(count < n){\n    let fibNum = fib(i);\n    if(isPrime(fibNum)){\n      count++;\n    }\n    i++;\n  }\n  return fib(i-1);\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  function fib(n) {\n    let arr = [0, 1];\n    for (let i = 2; i <= n + 1; i++){\n      arr.push(arr[i - 2] + arr[i -1])\n    }\n    return arr[n];\n  }\n\n  let count = 0;\n  let i = 0;\n  while (count < n) {\n    i++;\n    if (isPrime(fib(i))) {\n      count++;\n    }\n  }\n  return fib(i);\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  function fibonacci(num) {\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n      temp = a;\n      a = a + b;\n      b = temp;\n      num--;\n    }\n    return b;\n  }\n\n  let count = 0;\n  let fib = 0;\n  let i = 1;\n\n  while (count < n) {\n    fib = fibonacci(i);\n    if (isPrime(fib)) {\n      count++;\n    }\n    i++;\n  }\n\n  return fib;\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  function fib(num){\n    if(num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  }\n\n  let i = 0, count = 0;\n  while(count < n){\n    i++;\n    if(isPrime(fib(i))){\n      count++;\n    }\n  }\n  return fib(i);\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  function fib(num){\n    if(num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  }\n\n  let i = 0, count = 0;\n  while(count < n){\n    i++;\n    let fibNum = fib(i);\n    if(isPrime(fibNum)) count++;\n  }\n\n  return fib(i);\n}",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  function fib(num) {\n    if (num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  }\n\n  let count = 0;\n  let i = 0;\n  while (true) {\n    let fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) return fibNum;\n    }\n    i++;\n  }\n}"
    ],
    [
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    let sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    const sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    return sumA - sumB;\n  });\n  return nums;\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = String(Math.abs(a)).split('').reduce((acc, digit) => acc + Number(digit), 0);\n    const sumB = String(Math.abs(b)).split('').reduce((acc, digit) => acc + Number(digit), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n  });\n}",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumDigitsA = a.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n    const sumDigitsB = b.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n    return sumDigitsA - sumDigitsB;\n  });\n}"
    ],
    [
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n      if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n      if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n      if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n      if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n      if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}"
    ],
    [
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reversed = string.split('').reverse().join('');\n  let length = string.length;\n\n  for(let i = length; i >= 0; i--){\n    if(string.slice(0, i) === reversed.slice(length - i)){\n      return string + reversed.slice(i);\n    }\n  }\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reverse = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    if (string.slice(0, i) === reverse.slice(reverse.length - i)) {\n      return string + reverse.slice(i);\n    }\n  }\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reversed = string.split(\"\").reverse().join(\"\");\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substring(0, i) === reversed.substring(reversed.length - i)) {\n      return string + reversed.substring(i);\n    }\n  }\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  function isPalindrome(s) {\n    return s === s.split('').reverse().join('');\n  }\n\n  if (isPalindrome(string)) {\n    return string;\n  }\n\n  for (let i = string.length; i > 0; i--) {\n    let suffix = string.slice(i);\n    if (isPalindrome(suffix)) {\n      let prefix = string.slice(0, i);\n      let reversedPrefix = prefix.split('').reverse().join('');\n      return prefix + suffix + reversedPrefix;\n    }\n  }\n\n  return string + string.split('').reverse().join('');\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  function isPalindrome(s) {\n    return s === s.split(\"\").reverse().join(\"\");\n  }\n\n  if (isPalindrome(string)) {\n    return string;\n  }\n\n  for (let i = string.length; i > 0; i--) {\n    let suffix = string.substring(i);\n    if (isPalindrome(suffix)) {\n      let prefix = string.substring(0, i);\n      return prefix + suffix.split(\"\").reverse().join(\"\");\n    }\n  }\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  function isPalindrome(str) {\n    return str === str.split('').reverse().join('');\n  }\n\n  let suffix = '';\n  let prefix = string;\n\n  while (prefix.length > 0) {\n    if (isPalindrome(prefix)) {\n      break;\n    }\n\n    suffix = suffix + prefix[prefix.length - 1];\n    prefix = prefix.slice(0, -1);\n  }\n\n  return prefix + suffix.split('').reverse().join('');\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  function isPalindrome(s) {\n    return s === s.split(\"\").reverse().join(\"\");\n  }\n\n  let reverse = string.split(\"\").reverse().join(\"\");\n  let palindrome = string;\n\n  for (let i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(i))) {\n      palindrome = reverse.slice(0, i) + string;\n      break;\n    }\n  }\n\n  return palindrome;\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reversed = string.split('').reverse().join('');\n  let len = string.length;\n\n  for(let i = 0; i < len; i++) {\n    if(string.substring(0, len - i) === reversed.substring(i)) {\n      return string + reversed.substring(0, i);\n    }\n  }\n  \n  return string;\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reverse = string.split('').reverse().join('');\n  let n = string.length;\n  for(let i = n; i >= 0; i--) {\n    if(string.substring(0, i) === reverse.substring(n - i)) {\n      return string + reverse.substring(i);\n    }\n  }\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let reverse = string.split('').reverse().join('');\n  let len = string.length;\n  \n  for(let i = len; i >= 0; i--){\n    if(string.substring(0, i) == reverse.substring(len - i)){\n      return string + reverse.substring(i);\n    }\n  }\n}"
    ],
    [
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = '';\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = '';\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = '';\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = '';\n  for(let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}"
    ],
    [
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = 1; i <= n; i++){\n    let factorial = 1;\n    for(let j = 1; j <= i; j++){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let factorial = 1;\n  let brazilian_factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n    brazilian_factorial *= factorial;\n  }\n  return brazilian_factorial;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = 1; i <= n; i++){\n    let factorial = 1;\n    for(let j = 1; j <= i; j++){\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = 1; i <= n; i++){\n    result *= factorial(i);\n  }\n  return result;\n\n  function factorial(num){\n    let fact = 1;\n    for(let i = 1; i <= num; i++){\n      fact *= i;\n    }\n    return fact;\n  }\n}"
    ],
    [
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= -99 && arr[i] <= 99){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= -99 && arr[i] <= 99){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= -99 && arr[i] <= 99){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= 0 && arr[i] <= 99){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib4 = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n  }\n  \n  return fib4[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 2) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let a = 0, b = 0, c = 2, d = 0, e;\n\n  for(let i = 4; i <= n; i++){\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n\n  return e;\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4) {\n    if(n === 2) return 2;\n    else return 0;\n  }\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++) {\n    fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n  }\n  \n  return fib[n % 4];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4) {\n    if(n === 2) return 2;\n    return 0;\n  }\n  \n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++) {\n    let next = fib[0] + fib[1] + fib[2] + fib[3];\n    fib.shift();\n    fib.push(next);\n  }\n  \n  return fib[3];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 2) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n  \n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n  }\n  return fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}"
    ],
    [
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return num.toString().split('').every(digit => parseInt(digit) % 2 !== 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => num.toString().split('').every(digit => digit % 2 !== 0));\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return num.toString().split('').every(digit => parseInt(digit) % 2 !== 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return num.toString().split('').every(char => parseInt(char) % 2 !== 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return !num.toString().split('').some(digit => digit % 2 === 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return !num.toString().split('').some(digit => digit % 2 === 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => !/[02468]/.test(num));\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return num.toString().split('').every(digit => digit % 2 !== 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    return num.toString().split('').every(digit => digit % 2 !== 0);\n  });\n  return result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = x.filter(num => {\n    let digits = num.toString().split('');\n    return !digits.some(digit => digit % 2 === 0);\n  });\n  return result.sort((a, b) => a - b);\n}"
    ],
    [
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === \"\") return [];\n  \n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let words = s.split(\" \");\n  let result = [];\n\n  for(let word of words){\n    let consonants = 0;\n    for(let char of word){\n      if(!vowels.includes(char.toLowerCase())){\n        consonants++;\n      }\n    }\n    if(consonants === n){\n      result.push(word);\n    }\n  }\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === '') return [];\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const words = s.split(' ');\n  const result = [];\n  \n  for(let word of words){\n    let consonantCount = 0;\n    for(let char of word){\n      if(!vowels.includes(char)) consonantCount++;\n    }\n    if(consonantCount === n) result.push(word);\n  }\n  \n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if (s === '') return [];\n\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const words = s.split(' ');\n  const selectedWords = [];\n\n  words.forEach(word => {\n    let consonantsCount = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (!vowels.includes(word[i])) consonantsCount++;\n    }\n    if (consonantsCount === n) selectedWords.push(word);\n  });\n\n  return selectedWords;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === \"\") return [];\n\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result = [];\n\n  for(let word of words) {\n    let consonantCount = 0;\n    for(let char of word.toLowerCase()) {\n      if(!vowels.includes(char)) {\n        consonantCount++;\n      }\n    }\n    if(consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === '') return [];\n\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result = [];\n\n  for(let word of words){\n    let count = 0;\n    for(let char of word){\n      if(!vowels.includes(char.toLowerCase())){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(word);\n    }\n  }\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === \"\") return [];\n\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let words = s.split(' ');\n  let result = [];\n\n  for(let word of words){\n    let count = 0;\n    for(let char of word){\n      if(!vowels.includes(char.toLowerCase())){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(word);\n    }\n  }\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === \"\") return [];\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let words = s.split(' ');\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(!vowels.includes(words[i][j].toLowerCase())){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if (s === \"\") {\n    return [];\n  }\n\n  const words = s.split(\" \");\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  let result = [];\n\n  for (let word of words) {\n    let count = 0;\n    for (let letter of word) {\n      if (consonants.includes(letter)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if (s === \"\") return [];\n\n  const words = s.split(\" \");\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = [];\n\n  for (let word of words) {\n    let consonantCount = 0;\n    for (let char of word) {\n      if (!vowels.includes(char)) consonantCount++;\n    }\n    if (consonantCount === n) result.push(word);\n  }\n\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  if(s === '') return [];\n  \n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result = [];\n  \n  for(let word of words) {\n    let consonantsCount = 0;\n    for(let char of word) {\n      if(!vowels.includes(char.toLowerCase())) {\n        consonantsCount++;\n      }\n    }\n    if(consonantsCount === n) {\n      result.push(word);\n    }\n  }\n  \n  return result;\n}"
    ],
    [
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  const isPalindrome = q.toString() == q.reverse().toString();\n  const isUnderWeight = q.reduce((a, b) => a + b, 0) <= w;\n  return isPalindrome && isUnderWeight;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum = 0;\n  for (var i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  \n  for (var i = 0; i < q.length / 2; i++) {\n    if (q[i] != q[q.length - 1 - i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  const sum = q.reduce((a, b) => a + b, 0);\n  const isPalindrome = q.toString() === q.reverse().toString();\n  return sum <= w && isPalindrome;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n\n  let isPalindrome = q.toString() === q.reverse().toString();\n\n  return sum <= w && isPalindrome;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (q[i] !== q[q.length - 1 - i]) {\n      return false;\n    }\n  }\n  return sum <= w;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum = 0;\n  for (var i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n\n  for (var i = 0; i < q.length / 2; i++) {\n    if (q[i] !== q[q.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = q.reduce((a, b) => a + b, 0);\n  let isPalindrome = q.toString() == q.reverse().toString();\n  return isPalindrome && sum <= w;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  const isPalindrome = q.toString() === q.reverse().toString();\n  const sum = q.reduce((a, b) => a + b, 0);\n  return isPalindrome && sum <= w;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = q.reduce((a, b) => a + b, 0);\n  let isPalindrome = q.toString() == q.reverse().toString();\n  return sum <= w && isPalindrome;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (q[i] !== q[q.length - 1 - i]) {\n      return false;\n    }\n  }\n  return sum <= w;\n}"
    ],
    [
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 2) return 1;\n  let a = 1, b = 1;\n  for (let i = 3; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1)\n    return n;\n  let a = 0, b = 1;\n  for(let i = 2; i <= n; i++){\n    let temp = a + b;\n    a = b;\n    b = temp;\n  }\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 2) return 1;\n  let a = 1, b = 1;\n  for (let i = 3; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  let a = 0, b = 1, temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  let a = 0, b = 1, temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  let a = 0;\n  let b = 1;\n  for(let i = 2; i <= n; i++) {\n    let temp = b;\n    b = a + b;\n    a = temp;\n  }\n  return n === 0 ? a : b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) \n    return n;\n  let a = 0, b = 1;\n  for(let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) {\n    return n;\n  }\n  let prev = 0, next = 1;\n  for(let i = 2; i <= n; i++){\n    let temp = next;\n    next = prev + next;\n    prev = temp;\n  }\n  return next;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  let a = 0;\n  let b = 1;\n  for(let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return n === 0 ? a : b;\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) {\n    return n;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"
    ],
    [
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let strength = getStrength(extensions[i]);\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}\n\nfunction getStrength(extension) {\n  let cap = 0, sm = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n      cap++;\n    } else {\n      sm++;\n    }\n  }\n  return cap - sm;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return class_name + '.' + strongestExtension;\n\n  function getStrength(extension) {\n    let cap = 0;\n    let sm = 0;\n    for (let i = 0; i < extension.length; i++) {\n      if (extension[i] === extension[i].toUpperCase()) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    return cap - sm;\n  }\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = \"\";\n  let maxStrength = -Infinity;\n\n  for (let i = 0; i < extensions.length; i++) {\n    let CAP = 0;\n    let SM = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        CAP++;\n      } else {\n        SM++;\n      }\n    }\n    let strength = CAP - SM;\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extensions[i];\n    }\n  }\n  \n  return `${class_name}.${strongestExtension}`;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = '';\n  let maxStrength = -Infinity;\n\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let CAP = extension.split('').filter(c => c === c.toUpperCase()).length;\n    let SM = extension.split('').filter(c => c === c.toLowerCase()).length;\n    let strength = CAP - SM;\n\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extension;\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}\n\nfunction getStrength(extension) {\n  let CAP = 0, SM = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n      CAP++;\n    } else {\n      SM++;\n    }\n  }\n  return CAP - SM;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}\n\nfunction getStrength(extension) {\n  let CAP = 0, SM = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n      CAP++;\n    } else {\n      SM++;\n    }\n  }\n  return CAP - SM;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return class_name + '.' + strongestExtension;\n}\n\nfunction getStrength(extension) {\n  let CAP = 0, SM = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n      CAP++;\n    } else {\n      SM++;\n    }\n  }\n  return CAP - SM;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let highestStrength = calculateStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = calculateStrength(extensions[i]);\n    if (currentStrength > highestStrength) {\n      strongestExtension = extensions[i];\n      highestStrength = currentStrength;\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}\n\nfunction calculateStrength(extension) {\n  let CAP = 0;\n  let SM = 0;\n\n  for (let char of extension) {\n    if (char === char.toUpperCase()) {\n      CAP++;\n    } else {\n      SM++;\n    }\n  }\n\n  return CAP - SM;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = strength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = strength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return class_name + '.' + strongestExtension;\n\n  function strength(extension) {\n    let cap = 0;\n    let sm = 0;\n    for (let i = 0; i < extension.length; i++) {\n      if (extension[i] === extension[i].toUpperCase()) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    return cap - sm;\n  }\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongestExtension = extensions[0];\n  let maxStrength = getStrength(strongestExtension);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > maxStrength) {\n      maxStrength = currentStrength;\n      strongestExtension = extensions[i];\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n}\n\nfunction getStrength(extension) {\n  let cap = 0, sm = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n      cap++;\n    } else {\n      sm++;\n    }\n  }\n  return cap - sm;\n}"
    ],
    [
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else if (str[i] === ')' && stack.length) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst[0] + lst[1];\n  let stack = [];\n  \n  for (let char of str) {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')' && stack.length) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  \n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push('(');\n    } else if (str[i] === ')' && stack.length > 0) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n\n  for(let i = 0; i < str.length; i++) {\n    if(str[i] === '(') {\n      stack.push(str[i]);\n    } else if(str[i] === ')' && stack.length > 0) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join(\"\");\n  let stack = [];\n\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"(\"){\n      stack.push(str[i]);\n    } else if(str[i] === \")\" && stack.length !== 0){\n      stack.pop();\n    } else {\n      return \"No\";\n    }\n  }\n\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else if (str[i] === ')' && stack.length !== 0) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str1 = lst[0];\n  let str2 = lst[1];\n  \n  if ((str1 + str2).split(\"(\").length === (str1 + str2).split(\")\").length) {\n    return 'Yes';\n  }\n  if ((str2 + str1).split(\"(\").length === (str2 + str1).split(\")\").length) {\n    return 'Yes';\n  }\n  return 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n\n  for(let i = 0; i < str.length; i++) {\n    if(str[i] === '(') {\n      stack.push('(');\n    } else if(str[i] === ')' && stack.length !== 0) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join('');\n  let stack = [];\n  \n  for(let char of str) {\n    if(char === '(') {\n      stack.push(char);\n    } else if(char === ')' && stack.length) {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  \n  return stack.length === 0 ? 'Yes' : 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join(\"\");\n  let stack = [];\n\n  for(let i = 0; i < str.length; i++) {\n    if(str[i] === \"(\") {\n      stack.push(str[i]);\n    } else if(str[i] === \")\" && stack.length > 0) {\n      stack.pop();\n    } else {\n      return \"No\";\n    }\n  }\n\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}"
    ],
    [
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let uniqueArray = [...new Set(lst)];\n  uniqueArray.sort((a, b) => a - b);\n  return uniqueArray[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let uniqueArr = [...new Set(lst)];\n  if (uniqueArr.length < 2) return undefined;\n  uniqueArr.sort((a, b) => a - b);\n  return uniqueArr[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let uniqueArray = [...new Set(lst)];\n  uniqueArray.sort((a, b) => a - b);\n  if (uniqueArray.length < 2) {\n    return undefined;\n  } else {\n    return uniqueArray[1];\n  }\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let sortedArray = [...new Set(lst)].sort((a,b) => a-b);\n  return sortedArray[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let sortedArr = Array.from(new Set(lst)).sort((a, b) => a - b);\n  return sortedArr[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  \n  let sortedArr = Array.from(new Set(lst)).sort((a, b) => a - b);\n  \n  return sortedArr[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let uniqueArr = [...new Set(lst)];\n  if(uniqueArr.length < 2) {\n    return undefined;\n  } else {\n    uniqueArr.sort((a, b) => a - b);\n    return uniqueArr[1];\n  }\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if (lst.length < 2) return undefined;\n  let sortedArray = [...new Set(lst)].sort((a, b) => a - b);\n  return sortedArray[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let uniqueArr = Array.from(new Set(lst));\n  if (uniqueArr.length < 2) {\n    return undefined;\n  } else {\n    uniqueArr.sort((a, b) => a - b);\n    return uniqueArr[1];\n  }\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let unique = [...new Set(lst)];\n  unique.sort((a, b) => a - b);\n  return unique[1];\n}"
    ],
    [
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z) || (x + z === y) || (y + z === x);\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z || x + z === y || y + z === x);\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return x + y === z || y + z === x || z + x === y;\n  }\n  return false;\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return (x + y === z) || (x + z === y) || (y + z === x);\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return (x + y === z) || (x + z === y) || (y + z === x);\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x + y == z || x + z == y || y + z == x){\n      return true;\n    }\n  }\n  return false;\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z) || (x + z === y) || (y + z === x);\n  }\n  return false;\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return x + y === z || x + z === y || y + z === x;\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z) || (x + z === y) || (y + z === x);\n  } else {\n    return false;\n  }\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return (x + y == z) || (x + z == y) || (y + z == x);\n  }\n  return false;\n}"
    ],
    [
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}"
    ],
    [
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(item) {\n    return item + 1;\n  });\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(item => item + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(element => element + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(item => item + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}"
    ],
    [
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if(num < 2) return false;\n    for(let i = 2; i <= Math.sqrt(num); i++) {\n      if(num % i === 0) return false;\n    }\n    return true;\n  }\n  \n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  if(isPrime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(n) ? x : y;\n}"
    ],
    [
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return Math.pow(2, n) % p;\n}"
    ],
    [
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  \n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  \n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 == 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  let digits = num.toString().split('');\n  \n  for(let i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 0) {\n      evenCount++;\n    } else if(digits[i] % 2 !== 0) {\n      oddCount++;\n    }\n  }\n  \n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  let digits = num.toString().split('');\n  \n  for(let i = 0; i < digits.length; i++){\n    if(digits[i] % 2 === 0){\n      evenCount++;\n    } else if(digits[i] % 2 !== 0){\n      oddCount++;\n    }\n  }\n  \n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  let digits = num.toString().split('');\n\n  for(let i = 0; i < digits.length; i++){\n    if (parseInt(digits[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  while (num) {\n    let digit = num % 10;\n    if (digit % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  while (num) {\n    let digit = num % 10;\n    if (digit % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 == 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  num = Math.abs(num);\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 == 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let evenCount = 0;\n  let oddCount = 0;\n  let digits = Math.abs(num).toString().split('');\n  \n  for(let i = 0; i < digits.length; i++){\n    if(digits[i] % 2 == 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  \n  return [evenCount, oddCount];\n}"
    ],
    [
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  \n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  \n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) {\n    return false;\n  }\n  \n  for(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) {\n    return false;\n  }\n  \n  for(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n      return false;\n    }\n  }\n  \n  return true;\n}"
    ],
    [
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let largestPrime = -1;\n\n  while (n % 2 == 0) {\n    largestPrime = 2;\n    n /= 2;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      largestPrime = i;\n      n /= i;\n    }\n  }\n\n  if (n > 2) {\n    largestPrime = n;\n  }\n\n  return largestPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n    }\n  }\n  return n;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let largestPrime = -1;\n\n  while (n % 2 == 0) {\n    largestPrime = 2;\n    n /= 2;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      largestPrime = i;\n      n /= i;\n    }\n  }\n\n  if (n > 2) {\n    largestPrime = n;\n  }\n\n  return largestPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let maxPrime = -1;\n\n  while (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n\n  if (n > 2)\n    maxPrime = n;\n\n  return maxPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let largestPrime = -1;\n\n  while (n % 2 == 0) {\n    largestPrime = 2;\n    n /= 2;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      largestPrime = i;\n      n /= i;\n    }\n  }\n\n  if (n > 2) {\n    largestPrime = n;\n  }\n\n  return largestPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n    }\n  }\n  return n;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let maxPrime = -1;\n\n  while (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n\n  if (n > 2) {\n    maxPrime = n;\n  }\n\n  return maxPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let maxPrime = -1;\n\n  while (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n\n  if (n > 2) {\n    maxPrime = n;\n  }\n\n  return maxPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n    }\n  }\n  return n;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let maxPrime = -1;\n\n  while (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n\n  if (n > 2) {\n    maxPrime = n;\n  }\n\n  return maxPrime;\n}"
    ],
    [
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  \n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  \n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(num => (num - min) / (max - min));\n}"
    ],
    [
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if(smallestEven === Infinity) {\n    return [];\n  } else {\n    return [smallestEven, smallestIndex];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if (smallestIndex === -1) {\n    return [];\n  } else {\n    return [smallestEven, smallestIndex];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n\n  return smallestEven === Infinity ? [] : [smallestEven, index];\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEvenValue = Infinity;\n  let smallestEvenIndex = -1;\n\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEvenValue) {\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  if(smallestEvenIndex === -1) {\n    return [];\n  } else {\n    return [smallestEvenValue, smallestEvenIndex];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n\n  if (smallestEven === Infinity) {\n    return [];\n  } else {\n    return [smallestEven, index];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if(smallestIndex === -1)\n    return [];\n  else\n    return [smallestEven, smallestIndex];\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if(smallestEven === Infinity) {\n    return [];\n  } else {\n    return [smallestEven, smallestIndex];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  return smallestEven === Infinity ? [] : [smallestEven, smallestIndex];\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEvenValue = Infinity;\n  let smallestIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue) {\n      smallestEvenValue = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if (smallestIndex === -1) {\n    return [];\n  } else {\n    return [smallestEvenValue, smallestIndex];\n  }\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if(smallestEven === Infinity){\n    return [];\n  } else {\n    return [smallestEven, smallestIndex];\n  }\n}"
    ],
    [
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  let count = 0;\n\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  \n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let arr = new Array(n);\n  let count = 0;\n\n  for (let i = 1; i <= n; i++) {\n    arr[i-1] = i * i - i + 1;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i=1; i<=n; i++){\n    a.push(i*i - i + 1);\n  }\n  \n  let count = 0;\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  \n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    a[i-1] = i*i - i + 1;\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 == 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  let count = 0;\n  for(let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for(let i = 0; i < n; i++) {\n    for(let j = i + 1; j < n; j++) {\n      for(let k = j + 1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for(let i = 0; i < n; i++) {\n    for(let j = i + 1; j < n; j++) {\n      for(let k = j + 1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for(let i = 0; i < n - 2; i++){\n    for(let j = i + 1; j < n - 1; j++){\n      for(let k = j + 1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  let count = 0;\n\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  \n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"
    ],
    [
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  return oddCount1 <= evenCount2 ? \"YES\" : \"NO\";\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  return oddCount1 <= evenCount2 ? \"YES\" : \"NO\";\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  const oddCountLst1 = lst1.filter(num => num % 2 !== 0).length;\n  const evenCountLst2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (oddCountLst1 <= evenCountLst2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n  \n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(n => n % 2 !== 0).length;\n  let evenCount2 = lst2.filter(n => n % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(n => n % 2 !== 0).length;\n  let evenCount2 = lst2.filter(n => n % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (oddCount1 <= evenCount2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"
    ],
    [
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a - b});\n  var half = Math.floor(l.length / 2);\n\n  if(l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a - b});\n  var half = Math.floor(l.length / 2);\n\n  if(l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort((a, b) => a - b);\n  var half = Math.floor(l.length / 2);\n\n  if (l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort((a, b) => a - b);\n  let midIndex = Math.floor(l.length / 2);\n\n  if (l.length % 2) {\n    return l[midIndex];\n  } else {\n    return (l[midIndex - 1] + l[midIndex]) / 2.0;\n  }\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a-b});\n  var half = Math.floor(l.length/2);\n  \n  if(l.length % 2)\n    return l[half];\n  else\n    return (l[half-1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a - b});\n  var half = Math.floor(l.length / 2);\n\n  if(l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort((a, b) => a - b);\n  var half = Math.floor(l.length / 2);\n\n  if (l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a - b});\n  var half = Math.floor(l.length / 2);\n\n  if(l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a-b});\n  var half = Math.floor(l.length / 2);\n\n  if (l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  l.sort(function(a, b){return a - b});\n  var half = Math.floor(l.length / 2);\n\n  if (l.length % 2)\n    return l[half];\n  else\n    return (l[half - 1] + l[half]) / 2.0;\n}"
    ],
    [
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length < 2) return false;\n  for(let i = 2; i < length; i++) {\n    if(length % i === 0) return false;\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  const len = string.length;\n  \n  if (len < 2) {\n    return false;\n  }\n  \n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) {\n      return false;\n    }\n  }\n  \n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if (len < 2) return false;\n  for (let i = 2; i < len; i++) {\n    if (len % i === 0) return false;\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(string.length);\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n\n  if(length < 2) {\n    return false;\n  }\n\n  for(let i = 2; i <= Math.sqrt(length); i++) {\n    if(length % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}"
    ],
    [
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    if (arr[start] !== arr[end]) {\n      changes++;\n    }\n    start++;\n    end--;\n  }\n\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let start = 0;\n  let end = arr.length - 1;\n  \n  while(start <= end){\n    if(arr[start] !== arr[end]){\n      changes++;\n    }\n    start++;\n    end--;\n  }\n  \n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n\n  while(i < j) {\n    if(arr[i] != arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  \n  while (i < j) {\n    if (arr[i] !== arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n  \n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n\n  while (i < j) {\n    if (arr[i] !== arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let start = 0;\n  let end = arr.length - 1;\n  let changes = 0;\n\n  while (start <= end) {\n    if (arr[start] != arr[end]) {\n      changes++;\n    }\n    start++;\n    end--;\n  }\n\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i <= j) {\n    if (arr[i] !== arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let start = 0;\n  let end = arr.length - 1;\n  \n  while(start < end){\n    if(arr[start] != arr[end]){\n      changes++;\n    }\n    start++;\n    end--;\n  }\n  \n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    if (arr[start] != arr[end]) {\n      changes++;\n    }\n    start++;\n    end--;\n  }\n  return changes;\n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n  return changes;\n}"
    ],
    [
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = Math.ceil(lst[i]);\n    sum += num * num;\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}"
    ],
    [
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const parts = file_name.split('.');\n  const validExtensions = ['txt', 'exe', 'dll'];\n  \n  if (parts.length !== 2) return 'No';\n  if (!parts[0] || !/^[a-zA-Z]/.test(parts[0])) return 'No';\n  if ((parts[0].match(/[0-9]/g) || []).length > 3) return 'No';\n  if (!validExtensions.includes(parts[1])) return 'No';\n  \n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let digitCount = (file_name.match(/[0-9]/g) || []).length;\n  let dotCount = (file_name.match(/\\./g) || []).length;\n  let splitName = file_name.split('.');\n  let validExtensions = ['txt', 'exe', 'dll'];\n\n  if (digitCount > 3 || dotCount !== 1) {\n    return 'No';\n  }\n\n  if (!splitName[0] || !/^[a-zA-Z]/.test(splitName[0])) {\n    return 'No';\n  }\n\n  if (!validExtensions.includes(splitName[1])) {\n    return 'No';\n  }\n\n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  var digitsCount = (file_name.match(/[0-9]/g) || []).length;\n  var dotsCount = (file_name.match(/\\./g) || []).length;\n  var extension = file_name.split('.').pop();\n  var name = file_name.split('.')[0];\n  \n  if (digitsCount > 3 || dotsCount != 1 || !name || !/^[a-zA-Z]/.test(name) || !['txt', 'exe', 'dll'].includes(extension)) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let digitCount = (file_name.match(/[0-9]/g) || []).length;\n  let dotCount = (file_name.match(/\\./g) || []).length;\n  let parts = file_name.split('.');\n  \n  if (digitCount > 3 || dotCount != 1 || !parts[0] || !/^[a-zA-Z]/.test(parts[0])) {\n    return \"No\";\n  }\n  \n  let validExtensions = ['txt', 'exe', 'dll'];\n  if (validExtensions.includes(parts[1])) {\n    return \"Yes\";\n  }\n  \n  return \"No\";\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let parts = file_name.split('.');\n  let name = parts[0];\n  let extension = parts[1];\n\n  if (parts.length !== 2 || name.length === 0 || !name[0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  if (name.replace(/[^\\d]/g, '').length > 3) {\n    return 'No';\n  }\n\n  if (['txt', 'exe', 'dll'].indexOf(extension) === -1) {\n    return 'No';\n  }\n\n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let nameParts = file_name.split('.');\n  let validExtensions = ['txt', 'exe', 'dll'];\n\n  if (nameParts.length != 2 || !nameParts[0] || !validExtensions.includes(nameParts[1])) {\n    return 'No';\n  }\n\n  let name = nameParts[0];\n  let digitCount = name.replace(/[^0-9]/g, '').length;\n\n  if (digitCount > 3 || !/[a-zA-Z]/.test(name[0])) {\n    return 'No';\n  }\n\n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const parts = file_name.split('.');\n  const validExtensions = ['txt', 'exe', 'dll'];\n\n  if (parts.length !== 2 || parts[0] === '' || !validExtensions.includes(parts[1])) {\n    return 'No';\n  }\n\n  if (!/^[a-zA-Z]/.test(parts[0]) || (parts[0].match(/[0-9]/g) || []).length > 3) {\n    return 'No';\n  }\n\n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let splitName = file_name.split('.');\n  let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}$/;\n  let validExtensions = ['txt', 'exe', 'dll'];\n\n  if (splitName.length !== 2) {\n    return 'No';\n  }\n\n  if (!regex.test(splitName[0])) {\n    return 'No';\n  }\n\n  if (!validExtensions.includes(splitName[1])) {\n    return 'No';\n  }\n\n  return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let splitName = file_name.split(\".\");\n  let digitsCount = file_name.replace(/[^0-9]/g,\"\").length;\n\n  if (splitName.length !== 2 || digitsCount > 3 || !/^[a-zA-Z]/.test(splitName[0]) || !['txt', 'exe', 'dll'].includes(splitName[1])) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}"
    ],
    [
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++){\n    for(let j = i + 1; j < l.length - 1; j++){\n      for(let k = j + 1; k < l.length; k++){\n        if(l[i] + l[j] + l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"
    ],
    [
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Find the intersection of the intervals\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If the intervals don't intersect, return \"NO\"\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Find the intersection of the two intervals\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If the intervals don't intersect, return \"NO\"\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  \n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    // Find the intersection\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    // Check if there is an intersection\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let length = end - start;\n\n    // Check if the length is a prime number\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Calculate the intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  \n  // Check if there is an intersection\n  if (end < start) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  \n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Find the intersection of the intervals\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If the intervals do not intersect\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Determine the intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If there is no intersection\n  if (end < start) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Find the intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // Check if there is an intersection\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Find the intersection\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n\n  // If there's no intersection, return \"NO\"\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  // Calculate intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If there is no intersection, return \"NO\"\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate length of intersection\n  let length = end - start;\n\n  // Check if length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  // If length is a prime number, return \"YES\"\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start;\n\n  if (length < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}"
    ],
    [
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let result = [];\n  let group = '';\n\n  for(let i = 0; i < paren_string.length; i++){\n    group += paren_string[i];\n    if(paren_string[i] === '('){\n      stack.push(paren_string[i]);\n    }else{\n      stack.pop();\n    }\n\n    if(stack.length === 0){\n      result.push(group);\n      group = '';\n    }\n  }\n\n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let groups = [];\n  let level = 0;\n  let start = 0;\n\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      if(level === 0){\n        start = i;\n      }\n      level++;\n    } else if(paren_string[i] === ')'){\n      level--;\n      if(level === 0){\n        groups.push(paren_string.slice(start, i + 1));\n      }\n    }\n  }\n  return groups;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let result = [];\n  let group = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    group += paren_string[i];\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else {\n      stack.pop();\n      if (stack.length === 0) {\n        result.push(group);\n        group = '';\n      }\n    }\n  }\n  \n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let result = [];\n  let stack = [];\n  let group = '';\n\n  for (let char of paren_string) {\n    group += char;\n    if (char === '(') {\n      stack.push(char);\n    } else {\n      stack.pop();\n      if (stack.length === 0) {\n        result.push(group);\n        group = '';\n      }\n    }\n  }\n\n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let result = [];\n  let stack = [];\n  let temp = '';\n\n  for(let i = 0; i < paren_string.length; i++){\n    temp += paren_string[i];\n\n    if(paren_string[i] === '('){\n      stack.push(paren_string[i]);\n    } else if(paren_string[i] === ')'){\n      stack.pop();\n    }\n\n    if(stack.length === 0){\n      result.push(temp);\n      temp = '';\n    }\n  }\n\n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let groups = [];\n  let group = '';\n\n  for (let char of paren_string) {\n    if (char === '(') {\n      if (stack.length > 0) {\n        group += char;\n      }\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n      group += char;\n      if (stack.length === 0) {\n        groups.push(group);\n        group = '';\n      }\n    }\n  }\n  \n  return groups;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let groups = [];\n  let group = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    group += paren_string[i];\n    if (paren_string[i] === '(') {\n      stack.push('(');\n    } else {\n      stack.pop();\n    }\n\n    if (stack.length === 0) {\n      groups.push(group);\n      group = '';\n    }\n  }\n  \n  return groups;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let result = [];\n  let group = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    group += paren_string[i];\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else {\n      stack.pop();\n      if (stack.length === 0) {\n        result.push(group);\n        group = '';\n      }\n    }\n  }\n\n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let result = [];\n  let group = '';\n\n  for (let char of paren_string) {\n    if (char === '(') {\n      if (stack.length > 0) {\n        group += char;\n      }\n      stack.push(char);\n    } else if (char === ')') {\n      group += char;\n      stack.pop();\n      if (stack.length === 0) {\n        result.push(group);\n        group = '';\n      }\n    }\n  }\n  return result;\n}",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  paren_string = paren_string.replace(/\\s/g, '');\n  let stack = [];\n  let result = [];\n  let currentGroup = '';\n  \n  for (let i = 0; i < paren_string.length; i++) {\n    currentGroup += paren_string[i];\n    \n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else {\n      stack.pop();\n    }\n    \n    if (stack.length === 0) {\n      result.push(currentGroup);\n      currentGroup = '';\n    }\n  }\n  \n  return result;\n}"
    ],
    [
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}"
    ],
    [
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n == 1) {\n    return 2; // Only 1 and 10\n  } else {\n    return 2 * Math.pow(10, n - 1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n === 1) {\n    return 1;\n  }\n  return 2 * Math.pow(10, n - 1);\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if(n == 1) \n    return 1;\n  else\n    return 2 * Math.pow(10, n-1);\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n == 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n-1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n === 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n - 1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n === 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n - 1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n == 1) {\n    return 2; // 1 and 0\n  } else {\n    return 2 * Math.pow(10, n - 1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n === 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n - 1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n === 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n-1);\n  }\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  if (n == 1) {\n    return 1;\n  } else {\n    return 2 * Math.pow(10, n-1);\n  }\n}"
    ],
    [
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) {\n    return false;\n  }\n  var lastChar = txt[txt.length - 1];\n  var secondLastChar = txt[txt.length - 2];\n  return /^[a-zA-Z]$/.test(lastChar) && secondLastChar === \" \";\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) {\n    return false;\n  }\n  \n  const lastChar = txt[txt.length - 1];\n  const secondLastChar = txt[txt.length - 2];\n\n  return (/[a-zA-Z]/.test(lastChar) && secondLastChar === ' ');\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (txt.length === 0) {\n    return false;\n  }\n\n  let lastChar = txt[txt.length - 1];\n  \n  if (lastChar === ' ') {\n    return false;\n  }\n\n  if (lastChar.match(/[a-z]/i)) {\n    if (txt[txt.length - 2] === ' ') {\n      return true;\n    }\n  }\n\n  return false;\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let lastChar = txt.slice(-1);\n  let secondLastChar = txt.slice(-2, -1);\n  return /^[a-zA-Z]$/.test(lastChar) && secondLastChar === ' ';\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (txt.length === 0) {\n    return false;\n  }\n  \n  let lastChar = txt[txt.length - 1];\n  \n  if (lastChar === \" \") {\n    return false;\n  }\n  \n  return lastChar.match(/[a-z]/i) !== null;\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length == 0) return false;\n  let lastChar = txt[txt.length - 1];\n  let secondLastChar = txt[txt.length - 2];\n  return (/[a-zA-Z]/.test(lastChar) && secondLastChar == ' ');\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  if (lastChar === ' ') {\n    return false;\n  }\n  const secondLastChar = txt[txt.length - 2];\n  return /^[a-zA-Z]$/.test(lastChar) && secondLastChar === ' ';\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (!txt) return false;\n  var lastChar = txt[txt.length - 1];\n  var secondLastChar = txt[txt.length - 2];\n  return /^[a-zA-Z]$/.test(lastChar) && secondLastChar === \" \";\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt[txt.length - 1];\n  if (lastChar === ' ') {\n    return false;\n  }\n  return lastChar.match(/[a-z]/i) && (txt[txt.length - 2] === ' ' || txt.length === 1);\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length == 0) {\n    return false;\n  }\n\n  let lastChar = txt[txt.length - 1];\n  \n  if(lastChar === \" \") {\n    return false;\n  }\n\n  let secondLastChar = txt[txt.length - 2];\n  \n  if(secondLastChar === \" \" && /[a-zA-Z]/.test(lastChar)) {\n    return true;\n  }\n\n  return false;\n}"
    ],
    [
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let dateParts = date.split(\"-\");\n  if (dateParts.length !== 3) return false;\n\n  let month = parseInt(dateParts[0]);\n  let day = parseInt(dateParts[1]);\n  let year = parseInt(dateParts[2]);\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n  if (month < 1 || month > 12) return false;\n\n  if (day < 1 || day > 31) return false;\n\n  if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) return false;\n\n  if (month === 2 && day > 29) return false;\n\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date == \"\") return false;\n  let dateParts = date.split(\"-\");\n  if(dateParts.length != 3) return false;\n\n  let month = parseInt(dateParts[0]);\n  let day = parseInt(dateParts[1]);\n  let year = parseInt(dateParts[2]);\n\n  if(month < 1 || month > 12) return false;\n  if(year < 1) return false;\n\n  let maxDays = 31;\n  if(month == 4 || month == 6 || month == 9 || month == 11) maxDays = 30;\n  if(month == 2) maxDays = 29;\n\n  if(day < 1 || day > maxDays) return false;\n\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (!date) return false;\n  \n  let parts = date.split(\"-\");\n  if (parts.length !== 3) return false;\n  \n  let month = parseInt(parts[0], 10);\n  let day = parseInt(parts[1], 10);\n  let year = parseInt(parts[2], 10);\n  \n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n  \n  if (month < 1 || month > 12) return false;\n  \n  let maxDay = 31;\n  if ([4, 6, 9, 11].includes(month)) maxDay = 30;\n  if (month === 2) maxDay = 29;\n  \n  if (day < 1 || day > maxDay) return false;\n  \n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let parts = date.split('-');\n  if (parts.length !== 3) return false;\n\n  let month = parseInt(parts[0], 10);\n  let day = parseInt(parts[1], 10);\n  let year = parseInt(parts[2], 10);\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n  if (month < 1 || month > 12) return false;\n\n  if (day < 1) return false;\n\n  if (month === 2) {\n    if (day > 29) return false;\n  } else if ([4, 6, 9, 11].includes(month)) {\n    if (day > 30) return false;\n  } else {\n    if (day > 31) return false;\n  }\n\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (!date) {\n    return false;\n  }\n\n  let parts = date.split(\"-\");\n  if (parts.length !== 3) {\n    return false;\n  }\n\n  let month = parseInt(parts[0]);\n  let day = parseInt(parts[1]);\n  let year = parseInt(parts[2]);\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  let maxDays = 31;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    maxDays = 30;\n  } else if (month === 2) {\n    maxDays = (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)) ? 29 : 28;\n  }\n\n  if (day < 1 || day > maxDays) {\n    return false;\n  }\n\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (date === \"\") return false;\n  \n  let parts = date.split(\"-\");\n  \n  if (parts.length !== 3) return false;\n  \n  let month = parseInt(parts[0], 10);\n  let day = parseInt(parts[1], 10);\n  let year = parseInt(parts[2], 10);\n  \n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n  \n  if (month < 1 || month > 12) return false;\n  \n  let maxDay = 31;\n  if ([4, 6, 9, 11].includes(month)) maxDay = 30;\n  if (month === 2) maxDay = 29;\n  \n  if (day < 1 || day > maxDay) return false;\n  \n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  const datePattern = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n  const match = datePattern.exec(date);\n  \n  if (!match) {\n    return false;\n  }\n  \n  const month = parseInt(match[1], 10);\n  const day = parseInt(match[2], 10);\n  \n  if (month < 1 || month > 12) {\n    return false;\n  }\n  \n  if (day < 1 || day > 31) {\n    return false;\n  }\n  \n  if ([4, 6, 9, 11].includes(month) && day > 30) {\n    return false;\n  }\n  \n  if (month === 2 && day > 29) {\n    return false;\n  }\n  \n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (!date) return false;\n  const dateParts = date.split('-');\n  if (dateParts.length !== 3) return false;\n  const month = parseInt(dateParts[0]);\n  const day = parseInt(dateParts[1]);\n  const year = parseInt(dateParts[2]);\n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) return false;\n  if (month === 2 && day > 29) return false;\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (date === \"\") return false;\n\n  let pattern = /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n  let match = date.match(pattern);\n\n  if (match === null) return false;\n\n  let month = parseInt(match[1], 10);\n  let day = parseInt(match[2], 10);\n  let year = parseInt(match[3], 10);\n\n  if (month < 1 || month > 12) return false;\n\n  let month30 = [4, 6, 9, 11];\n  let month31 = [1, 3, 5, 7, 8, 10, 12];\n\n  if (month30.includes(month) && (day < 1 || day > 30)) return false;\n  if (month31.includes(month) && (day < 1 || day > 31)) return false;\n  if (month === 2 && (day < 1 || day > 29)) return false;\n\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if (!date) return false;\n\n  let parts = date.split(\"-\");\n  if (parts.length !== 3) return false;\n\n  let month = parseInt(parts[0]);\n  let day = parseInt(parts[1]);\n  let year = parseInt(parts[2]);\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n  if (month < 1 || month > 12) return false;\n\n  if (day < 1 || day > 31) return false;\n\n  if ([4, 6, 9, 11].includes(month) && day > 30) return false;\n\n  if (month === 2 && day > 29) return false;\n\n  return true;\n}"
    ],
    [
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i];\n    while(num != 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0) count++;\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let num of arr){\n    let sum = 0;\n    for(let digit of String(num)){\n      sum += parseInt(digit);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let num of arr){\n    let sum = 0;\n    for(let digit of String(Math.abs(num))){\n      sum += parseInt(digit);\n    }\n    if(num < 0) sum = -1 * sum;\n    if(sum > 0) count++;\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let num of arr) {\n    let sum = 0;\n    let strNum = String(num);\n    for(let digit of strNum) {\n      if(digit !== '-') {\n        sum += parseInt(digit);\n      } else {\n        sum -= parseInt(strNum[1]);\n      }\n    }\n    if(sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i].toString();\n    for(let j = 0; j < num.length; j++){\n      if(num[j] !== '-'){\n        sum += parseInt(num[j]);\n      }else{\n        sum -= parseInt(num[j+1]);\n        j++;\n      }\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i];\n    while(num != 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let num of arr){\n    let sum = 0;\n    for(let digit of String(num)){\n      sum += parseInt(digit);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let num of arr){\n    let sum = 0;\n    let strNum = String(num);\n    for(let digit of strNum){\n      if(digit !== '-'){\n        sum += parseInt(digit);\n      } else {\n        sum -= parseInt(strNum[1]);\n        break;\n      }\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i];\n    while(num != 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let num of arr) {\n    let sum = 0;\n    for (let digit of String(num)) {\n      sum += parseInt(digit);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"
    ],
    [
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ')\n          .map(word => word.split('')\n          .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n          .join(''))\n          .join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}"
    ],
    [
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  return text === text.split('').reverse().join('');\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"
    ],
    [
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let closestVowel = '';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      closestVowel = word[i];\n      break;\n    }\n  }\n  return closestVowel;\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = 'aeiouAEIOU';\n  for(let i = word.length - 2; i > 0; i--) {\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  for(let i = word.length - 2; i > 0; i--) {\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = 'aeiouAEIOU';\n  for(let i = word.length - 2; i > 0; i--) {\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = 'aeiouAEIOU';\n  for(let i = word.length - 2; i > 0; i--){\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n      return word[i];\n    }\n  }\n  return '';\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for(let i = word.length - 2; i > 0; i--){\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n      return word[i];\n    }\n  }\n  return '';\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let lastVowel = '';\n  \n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      lastVowel = word[i];\n      break;\n    }\n  }\n  \n  return lastVowel;\n}"
    ],
    [
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n < 2) return false;\n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0) return false;\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"
    ],
    [
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numeratorX, denominatorX] = x.split(\"/\").map(Number);\n  let [numeratorN, denominatorN] = n.split(\"/\").map(Number);\n\n  let resultNumerator = numeratorX * numeratorN;\n  let resultDenominator = denominatorX * denominatorN;\n\n  return resultNumerator % resultDenominator === 0;\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numX, denX] = x.split('/').map(Number);\n  let [numN, denN] = n.split('/').map(Number);\n\n  let result = (numX * numN) / (denX * denN);\n\n  return Number.isInteger(result);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  const [numX, denX] = x.split(\"/\").map(Number);\n  const [numN, denN] = n.split(\"/\").map(Number);\n\n  const numResult = numX * numN;\n  const denResult = denX * denN;\n\n  return numResult % denResult === 0;\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numX, denX] = x.split(\"/\").map(Number);\n  let [numN, denN] = n.split(\"/\").map(Number);\n\n  let numProduct = numX * numN;\n  let denProduct = denX * denN;\n\n  return numProduct % denProduct === 0;\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numX, denX] = x.split(\"/\").map(Number);\n  let [numN, denN] = n.split(\"/\").map(Number);\n\n  let resultNum = numX * numN;\n  let resultDen = denX * denN;\n\n  return resultNum % resultDen === 0;\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numX, denX] = x.split(\"/\").map(Number);\n  let [numN, denN] = n.split(\"/\").map(Number);\n\n  let result = (numX * numN) / (denX * denN);\n  \n  return Number.isInteger(result);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  const [xNum, xDen] = x.split(\"/\").map(Number);\n  const [nNum, nDen] = n.split(\"/\").map(Number);\n\n  const result = (xNum * nNum) / (xDen * nDen);\n\n  return Number.isInteger(result);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [num1, den1] = x.split(\"/\").map(Number);\n  let [num2, den2] = n.split(\"/\").map(Number);\n\n  let result = (num1 * num2) / (den1 * den2);\n  return Number.isInteger(result);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  const [numX, denX] = x.split('/').map(Number);\n  const [numN, denN] = n.split('/').map(Number);\n\n  const result = (numX * numN) / (denX * denN);\n  \n  return Number.isInteger(result);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let [numX, denX] = x.split('/').map(Number);\n  let [numN, denN] = n.split('/').map(Number);\n  \n  let numerator = numX * numN;\n  let denominator = denX * denN;\n  \n  return numerator % denominator === 0;\n}"
    ],
    [
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primeHex.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primeHex.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  \n  for (let i = 0; i < num.length; i++) {\n    if (primeHexDigits.includes(num[i])) {\n      count++;\n    }\n  }\n  \n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n  \n  for(let i = 0; i < num.length; i++){\n    if(primeHexDigits.includes(num[i])){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n\n  for (let i = 0; i < num.length; i++) {\n    if (primeHexDigits.includes(num[i])) {\n      count++;\n    }\n  }\n\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  for(let i = 0; i < num.length; i++){\n    if(primes.includes(num[i])){\n      count++;\n    }\n  }\n  return count;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  \n  for(let i = 0; i < num.length; i++) {\n    if(primes.includes(num[i])) {\n      count++;\n    }\n  }\n  \n  return count;\n}"
    ],
    [
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i == 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(\" \");\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(\" \");\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let result = words.filter(word => isPrime(word.length)).join(' ');\n\n  return result;\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeLengthWords = words.filter(word => isPrime(word.length));\n  return primeLengthWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return sentence.split(' ')\n    .filter(word => isPrime(word.length))\n    .join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i == 0) return false;\n    }\n    return true;\n  }\n\n  let words = sentence.split(' ');\n  let primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}"
    ],
    [
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let words = test.split(' ');\n  let histogram = {};\n  let maxCount = 0;\n  let maxLetters = {};\n\n  words.forEach(word => {\n    histogram[word] = (histogram[word] || 0) + 1;\n    if (histogram[word] > maxCount) {\n      maxCount = histogram[word];\n      maxLetters = { [word]: maxCount };\n    } else if (histogram[word] === maxCount) {\n      maxLetters[word] = maxCount;\n    }\n  });\n\n  return maxLetters;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let words = test.split(' ');\n  let histogram = {};\n  let maxCount = 0;\n  let result = {};\n\n  for (let word of words) {\n    if (histogram[word]) {\n      histogram[word]++;\n    } else {\n      histogram[word] = 1;\n    }\n\n    if (histogram[word] > maxCount) {\n      maxCount = histogram[word];\n    }\n  }\n\n  for (let word in histogram) {\n    if (histogram[word] === maxCount) {\n      result[word] = maxCount;\n    }\n  }\n\n  return result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let words = test.split(' ');\n  let count = {};\n  let maxCount = 0;\n  let result = {};\n\n  for(let word of words) {\n    if(word in count) {\n      count[word]++;\n    } else {\n      count[word] = 1;\n    }\n    if(count[word] > maxCount) {\n      maxCount = count[word];\n    }\n  }\n\n  for(let word in count) {\n    if(count[word] === maxCount) {\n      result[word] = maxCount;\n    }\n  }\n\n  return result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let maxCount = 0;\n  let words = test.split(\" \");\n\n  for (let i = 0; i < words.length; i++) {\n    if (obj[words[i]]) {\n      obj[words[i]]++;\n    } else {\n      obj[words[i]] = 1;\n    }\n    if (obj[words[i]] > maxCount) {\n      maxCount = obj[words[i]];\n    }\n  }\n\n  for (let prop in obj) {\n    if (obj[prop] < maxCount) {\n      delete obj[prop];\n    }\n  }\n\n  return obj;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let words = test.split(' ');\n  let frequency = {};\n  let max = 0;\n  let result = {};\n\n  for(let word of words){\n    if(word in frequency){\n      frequency[word]++;\n    } else {\n      frequency[word] = 1;\n    }\n    if(frequency[word] > max){\n      max = frequency[word];\n    }\n  }\n\n  for(let word in frequency){\n    if(frequency[word] === max){\n      result[word] = max;\n    }\n  }\n\n  return result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let words = test.split(' ');\n  let count = {};\n  let max = 0;\n  let result = {};\n\n  for(let word of words){\n    if(word in count){\n      count[word]++;\n    }else{\n      count[word] = 1;\n    }\n    if(count[word] > max){\n      max = count[word];\n    }\n  }\n\n  for(let word in count){\n    if(count[word] === max){\n      result[word] = max;\n    }\n  }\n\n  return result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let letters = test.split(' ');\n  let histogram = {};\n  let maxCount = 0;\n  let result = {};\n\n  for (let letter of letters) {\n    if (letter) {\n      histogram[letter] = (histogram[letter] || 0) + 1;\n      if (histogram[letter] > maxCount) {\n        maxCount = histogram[letter];\n      }\n    }\n  }\n\n  for (let letter in histogram) {\n    if (histogram[letter] === maxCount) {\n      result[letter] = maxCount;\n    }\n  }\n\n  return result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(' ');\n  let obj = {};\n  let max = 0;\n  arr.forEach((item) => {\n    if (item in obj) {\n      obj[item]++;\n    } else {\n      obj[item] = 1;\n    }\n    if (obj[item] > max) {\n      max = obj[item];\n    }\n  });\n  for (let prop in obj) {\n    if (obj[prop] < max) {\n      delete obj[prop];\n    }\n  }\n  return obj;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let letters = test.split(' ');\n  let histogram = {};\n  let maxCount = 0;\n\n  letters.forEach(letter => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n    if (histogram[letter] > maxCount) {\n      maxCount = histogram[letter];\n    }\n  });\n\n  for (let letter in histogram) {\n    if (histogram[letter] < maxCount) {\n      delete histogram[letter];\n    }\n  }\n\n  return histogram;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let letters = test.split(' ');\n  let letterCount = {};\n  let maxCount = 0;\n  let maxLetters = {};\n\n  for (let letter of letters) {\n    if (letter) {\n      letterCount[letter] = (letterCount[letter] || 0) + 1;\n      if (letterCount[letter] > maxCount) {\n        maxCount = letterCount[letter];\n      }\n    }\n  }\n\n  for (let letter in letterCount) {\n    if (letterCount[letter] === maxCount) {\n      maxLetters[letter] = maxCount;\n    }\n  }\n\n  return maxLetters;\n}"
    ],
    [
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++) {\n    for(let j = 0; j < lst[i].length; j++) {\n      if(lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if(a[0] === b[0]){\n      return b[1] - a[1];\n    } else {\n      return a[0] - b[0];\n    }\n  });\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    } else {\n      return a[0] - b[0];\n    }\n  });\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++) {\n    for(let j = 0; j < lst[i].length; j++) {\n      if(lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if(a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if(a[0] === b[0]) return b[1] - a[1];\n    return a[0] - b[0];\n  });\n  return result;\n}"
    ],
    [
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while(n != 1){\n    if(n % 2 != 0){\n      sequence.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1); // as the sequence always ends with 1\n  sequence.sort((a, b) => a - b);\n  return sequence;\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while(n != 1){\n    if(n % 2 != 0){\n      sequence.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  sequence.sort((a, b) => a - b);\n  return sequence;\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while(n != 1){\n    if(n % 2 != 0){\n      sequence.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1); // The sequence always ends with 1\n  sequence.sort((a, b) => a - b);\n  return sequence;\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while(n != 1) {\n    if(n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [];\n  while (n != 1) {\n    if (n % 2 != 0) {\n      sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  sequence.push(1);\n  sequence.sort((a, b) => a - b);\n  return sequence;\n}"
    ],
    [
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i - 1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--) {\n    if(arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i - 1]){\n      return i;\n    }\n  }\n  return -1;\n}"
    ],
    [
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n  const numArray = numbers.split(\" \");\n  numArray.sort((a, b) => numDict[a] - numDict[b]);\n  return numArray.join(\" \");\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberMap = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  const reverseNumberMap = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\"\n  };\n\n  return numbers.split(' ')\n    .map(num => numberMap[num])\n    .sort((a, b) => a - b)\n    .map(num => reverseNumberMap[num])\n    .join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberValues = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  const numberKeys = Object.keys(numberValues);\n\n  return numbers.split(' ')\n    .sort((a, b) => numberValues[a] - numberValues[b])\n    .join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberValues = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  let numberArray = numbers.split(\" \");\n  numberArray.sort((a, b) => numberValues[a] - numberValues[b]);\n\n  return numberArray.join(\" \");\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberWords = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n  numbers = numbers.split(\" \");\n  numbers.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));\n  return numbers.join(\" \");\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  const reverseDict = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\"\n  };\n\n  let numArray = numbers.split(' ').map(num => numDict[num]);\n  numArray.sort((a, b) => a - b);\n  return numArray.map(num => reverseDict[num]).join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  let splitNumbers = numbers.split(' ');\n  \n  splitNumbers.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));\n  \n  return splitNumbers.join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberMap = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  const reverseMap = Object.keys(numberMap).reduce((acc, key) => {\n    acc[numberMap[key]] = key;\n    return acc;\n  }, {});\n\n  return numbers.split(' ')\n    .map(word => numberMap[word])\n    .sort((a, b) => a - b)\n    .map(num => reverseMap[num])\n    .join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  \n  const reverseDict = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n  };\n  \n  return numbers.split(' ')\n                .map(word => numberDict[word])\n                .sort((a, b) => a - b)\n                .map(num => reverseDict[num])\n                .join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const numberMap = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n  const reverseMap = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\"\n  };\n  return numbers.split(' ').map(num => numberMap[num]).sort().map(num => reverseMap[num]).join(' ');\n}"
    ],
    [
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n  if(shift > len){\n    return str.split('').reverse().join('');\n  }\n  else{\n    shift = shift % len;\n    return str.slice(len - shift) + str.slice(0, len - shift);\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let strNum = String(x);\n  let len = strNum.length;\n\n  if(shift > len){\n    return strNum.split('').reverse().join('');\n  } else {\n    return strNum.slice(-shift) + strNum.slice(0, -shift);\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n\n  if (shift > len) {\n    return str.split(\"\").reverse().join(\"\");\n  } else {\n    return str.slice(len - shift) + str.slice(0, len - shift);\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let digits = x.toString().split('');\n  let len = digits.length;\n  if (shift > len) {\n    return digits.reverse().join('');\n  } else {\n    for(let i = 0; i < shift; i++) {\n      digits.unshift(digits.pop());\n    }\n    return digits.join('');\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  } else {\n    shift = shift % len;\n    return str.slice(len - shift) + str.slice(0, len - shift);\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let digits = x.toString().split('');\n  let len = digits.length;\n\n  if (shift > len) {\n    return digits.reverse().join('');\n  } else {\n    for (let i = 0; i < shift; i++) {\n      digits.unshift(digits.pop());\n    }\n    return digits.join('');\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  } else {\n    let part1 = str.substr(len - shift);\n    let part2 = str.substr(0, len - shift);\n    return part1 + part2;\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  } else {\n    let end = str.substring(len - shift);\n    let start = str.substring(0, len - shift);\n    return end + start;\n  }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    let len = str.length;\n\n    if (shift > len) {\n        return str.split('').reverse().join('');\n    } else {\n        let s = str.substring(len - shift) + str.substring(0, len - shift);\n        return s;\n    }\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  } else {\n    return str.slice(len - shift) + str.slice(0, len - shift);\n  }\n}"
    ],
    [
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n    else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if (i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0 && i % 4 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n    else if(i % 4 === 0){\n      sum += Math.pow(lst[i], 3);\n    }\n    else{\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n    else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0 && i % 4 !== 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 !== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"
    ],
    [
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n\n  return String(largestPrime)\n    .split('')\n    .reduce((acc, digit) => acc + Number(digit), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n\n  return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let maxPrime = Math.max(...lst.filter(isPrime));\n  return maxPrime.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n\n  return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n  return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n\n  return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n  return String(largestPrime).split('').reduce((a, b) => a + Number(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let maxPrime = Math.max(...lst.filter(isPrime));\n  \n  return maxPrime.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return true;\n  }\n\n  let largestPrime = Math.max(...lst.filter(isPrime));\n\n  return String(largestPrime).split('').reduce((a, b) => a + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n  \n  let largestPrime = Math.max(...lst.filter(isPrime));\n  return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}"
    ],
    [
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  \n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  \n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}"
    ],
    [
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--){\n    if(i % 2 === 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if (x > y) return -1;\n  if (y % 2 == 0) return y;\n  else if (y - 1 >= x) return y - 1;\n  else return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--){\n    if(i % 2 == 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--){\n    if(i % 2 === 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--){\n    if(i % 2 === 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--) {\n    if(i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--) {\n    if(i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for(let i = y; i >= x; i--){\n    if(i % 2 == 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}"
    ],
    [
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let a = undefined, b = undefined;\n  lst.forEach(num => {\n    if (num < 0) {\n      if (a === undefined || num > a) {\n        a = num;\n      }\n    } else if (num > 0) {\n      if (b === undefined || num < b) {\n        b = num;\n      }\n    }\n  });\n  return [a, b];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if (lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    }\n    if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallestPositive = Infinity;\n  let largestNegative = -Infinity;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < smallestPositive) {\n      smallestPositive = lst[i];\n    } else if (lst[i] < 0 && lst[i] > largestNegative) {\n      largestNegative = lst[i];\n    }\n  }\n\n  if (smallestPositive === Infinity) smallestPositive = undefined;\n  if (largestNegative === -Infinity) largestNegative = undefined;\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallestPositive = Infinity;\n  let largestNegative = -Infinity;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] > 0 && lst[i] < smallestPositive) {\n      smallestPositive = lst[i];\n    }\n    if(lst[i] < 0 && lst[i] > largestNegative) {\n      largestNegative = lst[i];\n    }\n  }\n\n  return [largestNegative === -Infinity ? undefined : largestNegative, smallestPositive === Infinity ? undefined : smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n  \n  return [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n}"
    ],
    [
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let uniqueCharacters = new Set(lowerCaseString);\n  return uniqueCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  string = string.toLowerCase();\n  let distinctCharacters = new Set();\n  for(let i = 0; i < string.length; i++) {\n    distinctCharacters.add(string[i]);\n  }\n  return distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let distinctChars = new Set(lowerCaseString);\n  return distinctChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  string = string.toLowerCase();\n  let distinctChars = new Set();\n  for(let i = 0; i < string.length; i++){\n    distinctChars.add(string[i]);\n  }\n  return distinctChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let distinctChars = new Set(lowerCaseString);\n  return distinctChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let distinctChars = new Set(lowerCaseString.split(''));\n  return distinctChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  string = string.toLowerCase();\n  let distinctChars = new Set();\n  for(let i = 0; i < string.length; i++){\n    distinctChars.add(string[i]);\n  }\n  return distinctChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let uniqueChars = new Set(lowerCaseString.split(''));\n  return uniqueChars.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let distinctCharacters = new Set(lowerCaseString);\n  return distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let lowerCaseString = string.toLowerCase();\n  let uniqueCharacters = new Set(lowerCaseString.split(''));\n  return uniqueCharacters.size;\n}"
    ],
    [
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (n % 2 == 0) {\n      pile.push(n + 2 * i);\n    } else {\n      pile.push(n + 2 * i);\n    }\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for(let i = 0; i < n; i++){\n    if(n % 2 == 0){\n      pile.push(n + 2*i);\n    } else {\n      pile.push(n + 2*i);\n    }\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  let stones = n;\n  for(let i = 0; i < n; i++) {\n    result.push(stones);\n    stones += n % 2 == 0 ? 2 : 1;\n  }\n  return result;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  for(let i = 0; i < n; i++) {\n    if(n % 2 == 0) {\n      result.push(n + 2 * i);\n    } else {\n      result.push(n + 2 * i);\n    }\n  }\n  return result;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for(let i = 0; i < n; i++){\n    if(n % 2 == 0){\n      pile.push(n + 2 * i);\n    } else {\n      pile.push(n + 2 * i);\n    }\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let stones = [];\n  for(let i = 0; i < n; i++){\n    if(n % 2 == 0){\n      stones.push(n + i * 2);\n    } else {\n      stones.push(n + i * 2);\n    }\n  }\n  return stones;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (n % 2 == 0) {\n      pile.push(n + 2 * i);\n    } else {\n      pile.push(n + 2 * i);\n    }\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for(let i = 0; i < n; i++){\n    if(i === 0){\n      pile.push(n);\n    } else {\n      let nextStone = n % 2 === 0 ? pile[i-1] + 2 : pile[i-1] + 2;\n      pile.push(nextStone);\n    }\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    stones += n % 2 === 0 ? 2 : 1;\n  }\n  return pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let stones = [];\n  for(let i = 0; i < n; i++) {\n    if(n % 2 == 0) {\n      stones.push(n + 2 * i);\n    } else {\n      stones.push(n + 2 * i);\n    }\n  }\n  return stones;\n}"
    ],
    [
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) {\n    return undefined;\n  }\n  \n  let sum = 0;\n  let product = 1;\n  \n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  \n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let signProduct = 1;\n  let magnitudeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signProduct *= 1;\n    } else if (arr[i] < 0) {\n      signProduct *= -1;\n    } else {\n      signProduct *= 0;\n    }\n    magnitudeSum += Math.abs(arr[i]);\n  }\n  return magnitudeSum * signProduct;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) return undefined;\n  \n  let sum = 0;\n  let signProduct = 1;\n  \n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    signProduct *= Math.sign(arr[i]);\n  }\n  \n  return sum * signProduct;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  \n  let sum = 0;\n  let product = 1;\n  \n  for(let i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  \n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) return undefined;\n  \n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n\n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let signProduct = 1;\n  let sumMagnitude = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signProduct *= 1;\n      sumMagnitude += arr[i];\n    } else if (arr[i] < 0) {\n      signProduct *= -1;\n      sumMagnitude += Math.abs(arr[i]);\n    } else {\n      signProduct *= 0;\n    }\n  }\n  return signProduct * sumMagnitude;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length == 0) {\n    return undefined;\n  }\n  \n  let sum = 0;\n  let product = 1;\n  \n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  \n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) return undefined;\n  \n  let sum = 0;\n  let product = 1;\n  \n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  \n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  return sum * product;\n}",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) {\n    return undefined;\n  }\n  \n  let sum = 0;\n  let product = 1;\n  \n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  \n  return sum * product;\n}"
    ],
    [
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  for(let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for(let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      minSum = Math.min(minSum, sum);\n    }\n  }\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < minSum) {\n        minSum = sum;\n      }\n    }\n  }\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for(let i=1; i<nums.length; i++){\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for(let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  for(let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for(let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if(sum < minSum) {\n        minSum = sum;\n      }\n    }\n  }\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      minSum = Math.min(minSum, sum);\n    }\n  }\n  return minSum;\n}"
    ],
    [
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = '';\n  for(let i = 0; i <= n; i++) {\n    sequence += i + ' ';\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++) {\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++) {\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let result = \"\";\n  for(let i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let sequence = \"\";\n  for(let i=0; i<=n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}"
    ],
    [
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (let i = 0; i < b.length; i++) {\n    let rotated = b.slice(i) + b.slice(0, i);\n    if (a.includes(rotated)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (let i = 0; i < b.length; i++) {\n    let rotated = b.slice(i) + b.slice(0, i);\n    if (a.includes(rotated)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let temp = b;\n  for(let i = 0; i < b.length; i++){\n    if(a.includes(temp)){\n      return true;\n    }\n    temp = temp.slice(1) + temp[0];\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < b.length; i++) {\n    let rotated = b.slice(i) + b.slice(0, i);\n    if(a.includes(rotated)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let rotations = [];\n  for(let i = 0; i < b.length; i++) {\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n  for(let rotation of rotations) {\n    if(a.includes(rotation)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let rotations = [];\n  for (let i = 0; i < b.length; i++) {\n    let rotation = b.slice(i) + b.slice(0, i);\n    rotations.push(rotation);\n  }\n  for (let rotation of rotations) {\n    if (a.includes(rotation)) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let rotations = [];\n  for(let i = 0; i < b.length; i++){\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n  for(let i = 0; i < rotations.length; i++){\n    if(a.includes(rotations[i])){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let temp = b;\n  for(let i = 0; i < b.length; i++){\n    if(a.includes(temp)) return true;\n    temp = temp.slice(1) + temp[0];\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let temp = b;\n  for(let i = 0; i < b.length; i++) {\n    if(a.includes(temp)) {\n      return true;\n    }\n    temp = temp.slice(1) + temp[0];\n  }\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let rotated = b;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(rotated)) {\n      return true;\n    }\n    rotated = rotated.slice(1) + rotated[0];\n  }\n  return false;\n}"
    ],
    [
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  let difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if(l.length <= 2) return true;\n  \n  let direction = l[1] - l[0];\n  for(let i = 2; i < l.length; i++){\n    if(direction === 0){\n      direction = l[i] - l[i-1];\n      continue;\n    }\n    if(breaksDirection(direction, l[i-1], l[i])){\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt){\n  let difference = currentInt - previousInt;\n  if(direction > 0){\n    return difference < 0;\n  }\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  let difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  let difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  let difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (direction > 0 && l[i] - l[i - 1] < 0) return false;\n    if (direction < 0 && l[i] - l[i - 1] > 0) return false;\n    if (direction == 0) direction = l[i] - l[i - 1];\n  }\n  return true;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if(l.length <= 2) return true;\n\n  let isIncreasing = l[1] > l[0] ? true : false;\n\n  for(let i = 2; i < l.length; i++){\n    if(isIncreasing){\n      if(l[i] < l[i-1]) return false;\n    } else {\n      if(l[i] > l[i-1]) return false;\n    }\n  }\n\n  return true;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let isIncreasing = l[1] > l[0];\n  for (let i = 2; i < l.length; i++) {\n    if ((isIncreasing && l[i] < l[i - 1]) || (!isIncreasing && l[i] > l[i - 1])) {\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length <= 2) return true;\n\n  let isIncreasing = l[1] > l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (isIncreasing) {\n      if (l[i] < l[i - 1]) return false;\n    } else {\n      if (l[i] > l[i - 1]) return false;\n    }\n  }\n\n  return true;\n}"
    ],
    [
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  \n  let longest = strings[0];\n  \n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longest.length){\n      longest = strings[i];\n    }\n  }\n  \n  return longest;\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  return strings.reduce((longest, current) => current.length > longest.length ? current : longest, strings[0]);\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  return strings.reduce((longest, current) => {\n    return current.length > longest.length ? current : longest;\n  }, \"\");\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  return strings.reduce((longestString, currentString) => {\n    return currentString.length > longestString.length ? currentString : longestString;\n  }, \"\");\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  return strings.reduce((a, b) => a.length >= b.length ? a : b);\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n}",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  \n  let longestString = strings[0];\n  \n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  \n  return longestString;\n}"
    ],
    [
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}"
    ],
    [
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(n) {\n    if (n <= 1) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      a /= i;\n      count++;\n      i--;\n    }\n  }\n\n  return count === 3 && a === 1;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(n) {\n    if (n <= 1) {\n      return false;\n    }\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      a /= i;\n      count++;\n      i--;\n    }\n  }\n\n  return count === 3;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let factors = [];\n  for(let i = 2; i <= a; i++) {\n    while(a % i === 0) {\n      factors.push(i);\n      a /= i;\n    }\n  }\n\n  if(factors.length !== 3) return false;\n  for(let i = 0; i < factors.length; i++) {\n    if(!isPrime(factors[i])) return false;\n  }\n  return true;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n      if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n  }\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i == 0 && isPrime(i)) {\n      a /= i;\n      count++;\n      i--;\n    }\n  }\n\n  return count == 3 && a == 1;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < 100; i++) {\n    if(isPrime(i)) {\n      primes.push(i);\n    }\n  }\n\n  for(let i = 0; i < primes.length; i++) {\n    for(let j = 0; j < primes.length; j++) {\n      for(let k = 0; k < primes.length; k++) {\n        if(primes[i] * primes[j] * primes[k] === a) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let count = 0;\n  for(let i = 2; i <= a; i++){\n    while(a % i === 0 && isPrime(i)){\n      a /= i;\n      count++;\n    }\n  }\n  return count === 3;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  let count = 0;\n  for(let i = 2; i <= a; i++) {\n    if(a % i === 0 && isPrime(i)) {\n      a /= i;\n      count++;\n      i--;\n    }\n  }\n  return count === 3 && a === 1;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < 100; i++) {\n    if(isPrime(i)) primes.push(i);\n  }\n\n  for(let i = 0; i < primes.length; i++) {\n    for(let j = 0; j < primes.length; j++) {\n      for(let k = 0; k < primes.length; k++) {\n        if(primes[i] * primes[j] * primes[k] === a) return true;\n      }\n    }\n  }\n  return false;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(num) {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primeFactors = [];\n  for(let i = 2; i <= a; i++) {\n    while(isPrime(i) && a % i === 0) {\n      if(!primeFactors.includes(i)) primeFactors.push(i);\n      a /= i;\n    }\n  }\n  return primeFactors.length === 3;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  function isPrime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n      if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n  }\n\n  let primeCount = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i == 0 && isPrime(i)) {\n      a /= i;\n      primeCount++;\n      i--;\n    }\n  }\n  return primeCount == 3 && a == 1;\n}"
    ],
    [
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(num => num > 0);\n}"
    ],
    [
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let divisibleByThree = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => i % 3 === 0 ? divisibleByThree.shift() : v);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let indices = [];\n  let values = [];\n\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      indices.push(i);\n      values.push(l[i]);\n    }\n  }\n\n  values.sort((a, b) => a - b);\n\n  for(let i = 0; i < indices.length; i++){\n    l[indices[i]] = values[i];\n  }\n\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let thirds = [];\n  for (let i = 0; i < l.length; i += 3) {\n    thirds.push(l[i]);\n  }\n  thirds.sort((a, b) => a - b);\n\n  for (let i = 0, j = 0; i < l.length; i += 3, j++) {\n    l[i] = thirds[j];\n  }\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let indices_divisible_by_three = [];\n  for(let i = 0; i < l.length; i += 3) {\n    indices_divisible_by_three.push(l[i]);\n  }\n  indices_divisible_by_three.sort((a, b) => a - b);\n  \n  for(let i = 0; i < l.length; i += 3) {\n    l[i] = indices_divisible_by_three.shift();\n  }\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let thirdIndices = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((val, i) => i % 3 === 0 ? thirdIndices.shift() : val);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let indicesDivByThree = [];\n  for(let i = 0; i < l.length; i += 3){\n    indicesDivByThree.push(l[i]);\n  }\n  indicesDivByThree.sort((a, b) => a - b);\n  \n  for(let i = 0; i < l.length; i += 3){\n    l[i] = indicesDivByThree.shift();\n  }\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let indicesDivisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n  let j = 0;\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l[i] = indicesDivisibleByThree[j];\n      j++;\n    }\n  }\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let thirdElements = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n  return l.map((value, index) => index % 3 === 0 ? thirdElements.shift() : value);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let thirdIndices = [];\n  for(let i = 0; i < l.length; i += 3){\n    thirdIndices.push(l[i]);\n  }\n  thirdIndices.sort((a, b) => a - b);\n  \n  for(let i = 0, j = 0; i < l.length; i += 3, j++){\n    l[i] = thirdIndices[j];\n  }\n  return l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let indicesDivByThree = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((val, i) => i % 3 === 0 ? indicesDivByThree.shift() : val);\n}"
    ],
    [
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let depths = [];\n\n  for (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        depth++;\n        if (depth > maxDepth) {\n          maxDepth = depth;\n        }\n      } else if (char === ')') {\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n\n  return depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let depths = [];\n\n  for(let group of groups){\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group){\n      if(char === '('){\n        depth++;\n        if(depth > maxDepth){\n          maxDepth = depth;\n        }\n      } else if(char === ')'){\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n\n  return depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let maxDepths = [];\n\n  for(let group of groups){\n    let depth = 0;\n    let maxDepth = 0;\n\n    for(let char of group){\n      if(char === '('){\n        depth++;\n        if(depth > maxDepth){\n          maxDepth = depth;\n        }\n      } else if(char === ')'){\n        depth--;\n      }\n    }\n    maxDepths.push(maxDepth);\n  }\n\n  return maxDepths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let depths = [];\n\n  for(let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group) {\n      if(char === '(') {\n        depth++;\n        if(depth > maxDepth) {\n          maxDepth = depth;\n        }\n      } else if(char === ')') {\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n  \n  return depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let depths = [];\n  \n  for(let group of groups){\n    let depth = 0, maxDepth = 0;\n    for(let char of group){\n      if(char === '('){\n        depth++;\n        if(depth > maxDepth){\n          maxDepth = depth;\n        }\n      } else if(char === ')'){\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n  \n  return depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(\" \");\n  let depths = [];\n  for (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        depth++;\n        if (depth > maxDepth) {\n          maxDepth = depth;\n        }\n      } else if (char === ')') {\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n  return depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let maxDepths = [];\n\n  for (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        depth++;\n        if (depth > maxDepth) {\n          maxDepth = depth;\n        }\n      } else if (char === ')') {\n        depth--;\n      }\n    }\n    maxDepths.push(maxDepth);\n  }\n\n  return maxDepths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(\" \");\n  let result = [];\n  for (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        depth++;\n        if (depth > maxDepth) {\n          maxDepth = depth;\n        }\n      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(maxDepth);\n  }\n  return result;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(' ');\n  let result = [];\n  for(let group of groups){\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group){\n      if(char === '('){\n        depth++;\n        if(depth > maxDepth){\n          maxDepth = depth;\n        }\n      } else if(char === ')'){\n        depth--;\n      }\n    }\n    result.push(maxDepth);\n  }\n  return result;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let groups = paren_string.split(\" \");\n  let depths = [];\n  for(let group of groups){\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group){\n      if(char === '('){\n        depth++;\n        if(depth > maxDepth){\n          maxDepth = depth;\n        }\n      }else if(char === ')'){\n        depth--;\n      }\n    }\n    depths.push(maxDepth);\n  }\n  return depths;\n}"
    ],
    [
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}"
    ],
    [
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a) % 10;\n  let unitB = Math.abs(b) % 10;\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let aUnit = Math.abs(a % 10);\n  let bUnit = Math.abs(b % 10);\n  return aUnit * bUnit;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitDigitA = Math.abs(a % 10);\n  let unitDigitB = Math.abs(b % 10);\n  return unitDigitA * unitDigitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n  return unitA * unitB;\n}"
    ],
    [
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  let deviations = numbers.map(num => Math.abs(num - mean));\n  let mad = deviations.reduce((a, b) => a + b, 0) / numbers.length;\n  return mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n\n  let deviationSum = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n  let mad = deviationSum / numbers.length;\n\n  return mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  \n  let deviations = numbers.map(num => Math.abs(num - mean));\n  let mad = deviations.reduce((a, b) => a + b, 0) / numbers.length;\n\n  return mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  let deviations = numbers.map(x => Math.abs(x - mean));\n  let totalDeviation = deviations.reduce((a, b) => a + b, 0);\n  return totalDeviation / numbers.length;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  \n  let deviations = numbers.map(number => Math.abs(number - mean));\n  \n  let totalDeviation = deviations.reduce((a, b) => a + b, 0);\n  \n  return totalDeviation / numbers.length;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  let deviations = numbers.map(x => Math.abs(x - mean));\n  let mad = deviations.reduce((a, b) => a + b, 0) / numbers.length;\n  return mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n\n  let deviations = numbers.map(number => Math.abs(number - mean));\n\n  let totalDeviation = deviations.reduce((a, b) => a + b, 0);\n\n  return totalDeviation / numbers.length;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n\n  let mad = numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n\n  return mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  \n  let deviations = numbers.map(x => Math.abs(x - mean));\n  let totalDeviation = deviations.reduce((a, b) => a + b, 0);\n  \n  return totalDeviation / numbers.length;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  let sum = numbers.reduce((a, b) => a + b, 0);\n  let mean = sum / numbers.length;\n  \n  let deviations = numbers.map(number => Math.abs(number - mean));\n  \n  let totalDeviation = deviations.reduce((a, b) => a + b, 0);\n  \n  return totalDeviation / numbers.length;\n}"
    ],
    [
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let commonElements = [...set1].filter(item => set2.has(item));\n  return commonElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let commonElements = l1.filter(value => l2.includes(value));\n  let uniqueElements = [...new Set(commonElements)];\n  return uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let commonElements = [...set1].filter(item => set2.has(item));\n  return commonElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let commonElements = [...set1].filter(item => set2.has(item));\n  return commonElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let common = [...set1].filter(item => set2.has(item));\n  return common.sort((a, b) => a - b);\n}"
    ],
    [
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  let num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let result = \"\";\n\n  for (let i = 0; i < num.length; i++) {\n    while (number >= num[i]) {\n      result += roman[i];\n      number -= num[i];\n    }\n  }\n  return result;\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1};\n  let str = '';\n\n  for (let i of Object.keys(roman)) {\n    let q = Math.floor(number / roman[i]);\n    number -= q * roman[i];\n    str += i.repeat(q);\n  }\n\n  return str.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  const romanNumList = {M:1000,CM:900, D:500,CD:400, C:100,XC:90, L:50,XL:40, X:10,IX:9, V:5,IV:4, I:1};\n  let a;\n  for(let key in romanNumList){\n    a = Math.floor(number / romanNumList[key]);\n    if(a >= 0){\n      for(let i = 0; i < a; i++){\n        roman += key;\n      }\n    }\n    number = number % romanNumList[key];\n  }\n  return roman.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1\n  };\n  let str = '';\n\n  for (let i of Object.keys(roman)) {\n    let q = Math.floor(number / roman[i]);\n    number -= q * roman[i];\n    str += i.repeat(q);\n  }\n\n  return str.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = { M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1 };\n  let str = '';\n\n  for (let i of Object.keys(roman)) {\n    let q = Math.floor(number / roman[i]);\n    number -= q * roman[i];\n    str += i.repeat(q);\n  }\n\n  return str.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  const romanNumList = {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1};\n  let a;\n  for(let key in romanNumList){\n    a = Math.floor(number / romanNumList[key]);\n    if(a >= 0){\n      for(let i = 0; i < a; i++){\n        roman += key;\n      }\n    }\n    number = number % romanNumList[key];\n  }\n  return roman.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumerals = {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1};\n  let roman = \"\";\n\n  for (let key in romanNumerals) {\n    while (number >= romanNumerals[key]) {\n      roman += key;\n      number -= romanNumerals[key];\n    }\n  }\n  return roman.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  let decimal = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let result = \"\";\n\n  for (let i = 0; i < decimal.length; i++) {\n    while (number % decimal[i] < number) {     \n      result += roman[i];\n      number -= decimal[i];\n    }\n  }\n\n  return result;\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumerals = {M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1};\n  let roman = '';\n\n  for (let key in romanNumerals) {\n    while (number >= romanNumerals[key]) {\n      roman += key;\n      number -= romanNumerals[key];\n    }\n  }\n  return roman.toLowerCase();\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = [\n    [\"m\", 1000], [\"cm\", 900], [\"d\", 500], [\"cd\", 400],\n    [\"c\", 100], [\"xc\", 90], [\"l\", 50], [\"xl\", 40],\n    [\"x\", 10], [\"ix\", 9], [\"v\", 5], [\"iv\", 4],\n    [\"i\", 1]\n  ];\n  let str = \"\";\n\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i][1]) {\n      str += roman[i][0];\n      number -= roman[i][1];\n    }\n  }\n\n  return str;\n}"
    ],
    [
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  return n - (apples + oranges);\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.match(/\\d+/g).map(Number);\n  let total_apples_oranges = fruits.reduce((a, b) => a + b, 0);\n  return n - total_apples_oranges;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.split(\" \");\n  let apples = parseInt(fruits[0]);\n  let oranges = parseInt(fruits[3]);\n  let mangoes = n - (apples + oranges);\n  return mangoes;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruits = s.match(/\\d+/g).map(Number);\n  let totalApplesOranges = fruits.reduce((a, b) => a + b, 0);\n  return n - totalApplesOranges;\n}"
    ],
    [
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}"
    ],
    [
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}"
    ],
    [
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(' ')) {\n    return txt.split(' ');\n  } else if(txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for(let i = 0; i < txt.length; i++) {\n      let charCode = txt[i].toLowerCase().charCodeAt(0) - 97;\n      if(charCode % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if ((txt.charCodeAt(i) - 97) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')) {\n        return txt.split(' ');\n    } else if(txt.includes(',')) {\n        return txt.split(',');\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++) {\n            let char = txt[i];\n            if(char === char.toLowerCase() && (char.charCodeAt(0) - 97) % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      let charCode = txt.charCodeAt(i) - 97;\n      if (charCode % 2 != 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      let charCode = txt[i].toLowerCase().charCodeAt(0) - 97;\n      if (charCode % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if ((txt[i].charCodeAt() - 97) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } \n  else if (txt.includes(',')) {\n    return txt.split(',');\n  } \n  else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && txt.charCodeAt(i) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if ((txt[i].charCodeAt(0) - 'a'.charCodeAt(0)) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(' ')) {\n    return txt.split(' ');\n  } else if(txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for(let i = 0; i < txt.length; i++) {\n      let charCode = txt[i].toLowerCase().charCodeAt(0) - 97;\n      if(charCode % 2 != 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      let charCode = txt[i].toLowerCase().charCodeAt(0) - 97;\n      if (charCode % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}"
    ],
    [
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const bitCountA = a.toString(2).replace(/0/g, '').length;\n    const bitCountB = b.toString(2).replace(/0/g, '').length;\n    if (bitCountA === bitCountB) {\n      return a - b;\n    }\n    return bitCountA - bitCountB;\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('').filter(bit => bit === '1').length;\n    const bOnes = b.toString(2).split('').filter(bit => bit === '1').length;\n    if(aOnes === bOnes) return a - b;\n    return aOnes - bOnes;\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const bitCountA = a.toString(2).replace(/0/g, '').length;\n    const bitCountB = b.toString(2).replace(/0/g, '').length;\n\n    if (bitCountA === bitCountB) {\n      return a - b;\n    } else {\n      return bitCountA - bitCountB;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).replace(/0/g, '').length;\n    const bOnes = b.toString(2).replace(/0/g, '').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const bitCountA = a.toString(2).replace(/0/g, '').length;\n    const bitCountB = b.toString(2).replace(/0/g, '').length;\n    if (bitCountA === bitCountB) {\n      return a - b;\n    } else {\n      return bitCountA - bitCountB;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).replace(/0/g, '').length;\n    const bOnes = b.toString(2).replace(/0/g, '').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const bitCountA = a.toString(2).replace(/0/g, '').length;\n    const bitCountB = b.toString(2).replace(/0/g, '').length;\n    if (bitCountA === bitCountB) {\n      return a - b;\n    } else {\n      return bitCountA - bitCountB;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const binA = a.toString(2).replace(/0/g, '').length;\n    const binB = b.toString(2).replace(/0/g, '').length;\n    if (binA === binB) {\n      return a - b;\n    }\n    return binA - binB;\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const bitCountA = a.toString(2).replace(/0/g, '').length;\n    const bitCountB = b.toString(2).replace(/0/g, '').length;\n    if (bitCountA === bitCountB) {\n      return a - b;\n    }\n    return bitCountA - bitCountB;\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).replace(/0/g, '').length;\n    const bOnes = b.toString(2).replace(/0/g, '').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n}"
    ],
    [
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join('');\n}"
    ],
    [
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length !== b.length) {\n      return a.length - b.length;\n    } else {\n      return a.localeCompare(b);\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length - b.length !== 0) {\n      return a.length - b.length;\n    } else {\n      return a.localeCompare(b);\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length !== b.length) {\n      return a.length - b.length;\n    } else {\n      return a.localeCompare(b);\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  lst = lst.filter(word => word.length % 2 == 0);\n  lst.sort((a, b) => {\n    if (a.length - b.length === 0) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  return lst;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  return evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  return evenLengthStrings;\n}"
    ],
    [
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(string => string.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(string => string.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(string => string.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(string => string.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(str => str.includes(substring));\n}"
    ],
    [
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  return num >= 0 ? Math.round(num) : Math.floor(num);\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let number = parseFloat(value);\n  if (number >= 0) {\n    return Math.round(number);\n  } else {\n    return -Math.round(Math.abs(number));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if (num < 0) {\n    return Math.floor(num - 0.5);\n  } else {\n    return Math.floor(num + 0.5);\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if (num >= 0) {\n    return Math.round(num);\n  } else {\n    return -Math.round(Math.abs(num));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if(num >= 0){\n    return Math.round(num);\n  } else {\n    return -Math.round(Math.abs(num));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let number = parseFloat(value);\n  if (number >= 0) {\n    return Math.round(number);\n  } else {\n    return -Math.round(Math.abs(number));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  if (num >= 0) {\n    return Math.round(num);\n  } else {\n    return -Math.round(Math.abs(num));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if (num >= 0) {\n    return Math.round(num);\n  } else {\n    return -Math.round(Math.abs(num));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if (num >= 0) {\n    return Math.round(num);\n  } else {\n    return -Math.round(Math.abs(num));\n  }\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let num = parseFloat(value);\n  if (num < 0) {\n    return Math.floor(num - 0.5);\n  }\n  return Math.floor(num + 0.5);\n}"
    ],
    [
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n  }\n  if(s[s.length - 1].toLowerCase() === 'y'){\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n  }\n  if(s[s.length-1].toLowerCase() === 'y'){\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let lowerCaseStr = s.toLowerCase();\n  for(let i = 0; i < lowerCaseStr.length; i++){\n    if('aeiou'.includes(lowerCaseStr[i])){\n      count++;\n    }\n  }\n  if(lowerCaseStr.endsWith('y')){\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  s = s.toLowerCase();\n  for(let i = 0; i < s.length; i++) {\n    if('aeiou'.includes(s[i])) {\n      count++;\n    }\n  }\n  if(s.endsWith('y')) {\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  s = s.toLowerCase();\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n      count++;\n    }\n  }\n  if(s[s.length-1] === 'y'){\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  s = s.toLowerCase();\n  let count = 0;\n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if(s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i])){\n      count++;\n    }\n  }\n  if(s[s.length-1] === 'y' || s[s.length-1] === 'Y'){\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  s = s.toLowerCase();\n  let count = 0;\n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if(s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n}",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i])){\n      count++;\n    }\n  }\n  if(s[s.length - 1] === 'y' || s[s.length - 1] === 'Y'){\n    count++;\n  }\n  return count;\n}"
    ],
    [
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  words.sort();\n\n  for (let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUnique = 0;\n  let maxWord = \"\";\n\n  for(let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n    if(uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUnique = 0;\n  let maxWord = \"\";\n  \n  for(let word of words) {\n    let uniqueChars = new Set(word).size;\n    if(uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  }\n  \n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUnique = 0;\n  let maxWord = \"\";\n\n  words.sort();\n\n  for(let word of words) {\n    let uniqueCount = new Set(word).size;\n    if(uniqueCount > maxUnique) {\n      maxUnique = uniqueCount;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUnique = 0;\n  let maxWord = words[0];\n\n  words.forEach(word => {\n    const uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  });\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUnique = 0;\n  let maxWord = \"\";\n\n  words.sort();\n\n  for (let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUnique) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  for(let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n    if(uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && word < maxWord)) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUniqueChars = 0;\n  let maxWord = words[0];\n\n  words.forEach(word => {\n    let uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === maxUniqueChars) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  });\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  for(let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n\n    if(uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    } else if(uniqueChars === maxUniqueChars) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  }\n\n  return maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  words.sort();\n\n  words.forEach(word => {\n    let uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    }\n  });\n\n  return maxWord;\n}"
    ],
    [
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === '') {\n    return undefined;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\") {\n    return undefined;\n  }\n  var crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest(\"hex\");\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  \n  const crypto = require('crypto');\n  const hash = crypto.createHash('md5').update(text).digest('hex');\n  \n  return hash;\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === '') {\n    return undefined;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\") return undefined;\n  var crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  \n  var crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  } else {\n    const crypto = require('crypto');\n    return crypto.createHash('md5').update(text).digest('hex');\n  }\n}"
    ],
    [
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  return x.toString(base);\n}"
    ],
    [
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  let max = Math.max(a, b, c);\n  let sum = a**2 + b**2 + c**2 - max**2;\n  return sum === max**2;\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  var sides = [a, b, c].sort(function(a, b){return a-b});\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  let max = Math.max(a, b, c);\n  let sum = a**2 + b**2 + c**2 - max**2;\n  return sum === max**2;\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  var max = Math.max(a, b, c);\n  var otherSides = a + b + c - max;\n  return max * max == otherSides * otherSides;\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  let max = Math.max(a, b, c);\n  let sum = a**2 + b**2 + c**2 - max**2;\n  return sum === max**2;\n}"
    ],
    [
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] === 4.0){\n      letterGrades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letterGrades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letterGrades.push(\"A-\");\n    } else if(grades[i] > 3.0){\n      letterGrades.push(\"B+\");\n    } else if(grades[i] > 2.7){\n      letterGrades.push(\"B\");\n    } else if(grades[i] > 2.3){\n      letterGrades.push(\"B-\");\n    } else if(grades[i] > 2.0){\n      letterGrades.push(\"C+\");\n    } else if(grades[i] > 1.7){\n      letterGrades.push(\"C\");\n    } else if(grades[i] > 1.3){\n      letterGrades.push(\"C-\");\n    } else if(grades[i] > 1.0){\n      letterGrades.push(\"D+\");\n    } else if(grades[i] > 0.7){\n      letterGrades.push(\"D\");\n    } else if(grades[i] > 0.0){\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  return grades.map(gpa => {\n    if (gpa === 4.0) return \"A+\";\n    else if (gpa > 3.7) return \"A\";\n    else if (gpa > 3.3) return \"A-\";\n    else if (gpa > 3.0) return \"B+\";\n    else if (gpa > 2.7) return \"B\";\n    else if (gpa > 2.3) return \"B-\";\n    else if (gpa > 2.0) return \"C+\";\n    else if (gpa > 1.7) return \"C\";\n    else if (gpa > 1.3) return \"C-\";\n    else if (gpa > 1.0) return \"D+\";\n    else if (gpa > 0.7) return \"D\";\n    else if (gpa > 0.0) return \"D-\";\n    else return \"E\";\n  });\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] > 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grades[i] > 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grades[i] > 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grades[i] > 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grades[i] > 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grades[i] > 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i] > 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] > 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] > 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grades[i] > 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grades[i] > 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] == 4.0) {\n      letterGrades.push(\"A+\");\n    } else if (grades[i] > 3.7) {\n      letterGrades.push(\"A\");\n    } else if (grades[i] > 3.3) {\n      letterGrades.push(\"A-\");\n    } else if (grades[i] > 3.0) {\n      letterGrades.push(\"B+\");\n    } else if (grades[i] > 2.7) {\n      letterGrades.push(\"B\");\n    } else if (grades[i] > 2.3) {\n      letterGrades.push(\"B-\");\n    } else if (grades[i] > 2.0) {\n      letterGrades.push(\"C+\");\n    } else if (grades[i] > 1.7) {\n      letterGrades.push(\"C\");\n    } else if (grades[i] > 1.3) {\n      letterGrades.push(\"C-\");\n    } else if (grades[i] > 1.0) {\n      letterGrades.push(\"D+\");\n    } else if (grades[i] > 0.7) {\n      letterGrades.push(\"D\");\n    } else if (grades[i] > 0.0) {\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  return grades.map(grade => {\n    if (grade === 4.0) return \"A+\";\n    if (grade > 3.7) return \"A\";\n    if (grade > 3.3) return \"A-\";\n    if (grade > 3.0) return \"B+\";\n    if (grade > 2.7) return \"B\";\n    if (grade > 2.3) return \"B-\";\n    if (grade > 2.0) return \"C+\";\n    if (grade > 1.7) return \"C\";\n    if (grade > 1.3) return \"C-\";\n    if (grade > 1.0) return \"D+\";\n    if (grade > 0.7) return \"D\";\n    if (grade > 0.0) return \"D-\";\n    return \"E\";\n  });\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for (let grade of grades) {\n    if (grade == 4.0) {\n      letterGrades.push(\"A+\");\n    } else if (grade > 3.7) {\n      letterGrades.push(\"A\");\n    } else if (grade > 3.3) {\n      letterGrades.push(\"A-\");\n    } else if (grade > 3.0) {\n      letterGrades.push(\"B+\");\n    } else if (grade > 2.7) {\n      letterGrades.push(\"B\");\n    } else if (grade > 2.3) {\n      letterGrades.push(\"B-\");\n    } else if (grade > 2.0) {\n      letterGrades.push(\"C+\");\n    } else if (grade > 1.7) {\n      letterGrades.push(\"C\");\n    } else if (grade > 1.3) {\n      letterGrades.push(\"C-\");\n    } else if (grade > 1.0) {\n      letterGrades.push(\"D+\");\n    } else if (grade > 0.7) {\n      letterGrades.push(\"D\");\n    } else if (grade > 0.0) {\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] === 4.0) letterGrades.push(\"A+\");\n    else if(grades[i] > 3.7) letterGrades.push(\"A\");\n    else if(grades[i] > 3.3) letterGrades.push(\"A-\");\n    else if(grades[i] > 3.0) letterGrades.push(\"B+\");\n    else if(grades[i] > 2.7) letterGrades.push(\"B\");\n    else if(grades[i] > 2.3) letterGrades.push(\"B-\");\n    else if(grades[i] > 2.0) letterGrades.push(\"C+\");\n    else if(grades[i] > 1.7) letterGrades.push(\"C\");\n    else if(grades[i] > 1.3) letterGrades.push(\"C-\");\n    else if(grades[i] > 1.0) letterGrades.push(\"D+\");\n    else if(grades[i] > 0.7) letterGrades.push(\"D\");\n    else if(grades[i] > 0.0) letterGrades.push(\"D-\");\n    else letterGrades.push(\"E\");\n  }\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  return grades.map(gpa => {\n    if (gpa === 4.0) return 'A+';\n    if (gpa > 3.7) return 'A';\n    if (gpa > 3.3) return 'A-';\n    if (gpa > 3.0) return 'B+';\n    if (gpa > 2.7) return 'B';\n    if (gpa > 2.3) return 'B-';\n    if (gpa > 2.0) return 'C+';\n    if (gpa > 1.7) return 'C';\n    if (gpa > 1.3) return 'C-';\n    if (gpa > 1.0) return 'D+';\n    if (gpa > 0.7) return 'D';\n    if (gpa > 0.0) return 'D-';\n    return 'E';\n  });\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] === 4.0){\n      letterGrades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letterGrades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letterGrades.push(\"A-\");\n    } else if(grades[i] > 3.0){\n      letterGrades.push(\"B+\");\n    } else if(grades[i] > 2.7){\n      letterGrades.push(\"B\");\n    } else if(grades[i] > 2.3){\n      letterGrades.push(\"B-\");\n    } else if(grades[i] > 2.0){\n      letterGrades.push(\"C+\");\n    } else if(grades[i] > 1.7){\n      letterGrades.push(\"C\");\n    } else if(grades[i] > 1.3){\n      letterGrades.push(\"C-\");\n    } else if(grades[i] > 1.0){\n      letterGrades.push(\"D+\");\n    } else if(grades[i] > 0.7){\n      letterGrades.push(\"D\");\n    } else if(grades[i] > 0.0){\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letterGrades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] == 4.0) letterGrades.push(\"A+\");\n    else if(grades[i] > 3.7) letterGrades.push(\"A\");\n    else if(grades[i] > 3.3) letterGrades.push(\"A-\");\n    else if(grades[i] > 3.0) letterGrades.push(\"B+\");\n    else if(grades[i] > 2.7) letterGrades.push(\"B\");\n    else if(grades[i] > 2.3) letterGrades.push(\"B-\");\n    else if(grades[i] > 2.0) letterGrades.push(\"C+\");\n    else if(grades[i] > 1.7) letterGrades.push(\"C\");\n    else if(grades[i] > 1.3) letterGrades.push(\"C-\");\n    else if(grades[i] > 1.0) letterGrades.push(\"D+\");\n    else if(grades[i] > 0.7) letterGrades.push(\"D\");\n    else if(grades[i] > 0.0) letterGrades.push(\"D-\");\n    else letterGrades.push(\"E\");\n  }\n  return letterGrades;\n}"
    ],
    [
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++) {\n    if(i !== numbers.length - 1) {\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i < numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i < numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i !== numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i < numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++) {\n    if(i < numbers.length - 1) {\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i !== numbers.length - 1) {\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i !== numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(i !== numbers.length - 1){\n      result.push(numbers[i], delimeter);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}"
    ],
    [
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10) {\n      let strNum = num.toString();\n      let firstDigit = parseInt(strNum[0]);\n      let lastDigit = parseInt(strNum[strNum.length - 1]);\n      if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]);\n    if(num > 10 && num % 2 !== 0 && Math.floor(num / 10) % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && num % 2 != 0 && Math.floor(num / 10) % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let num of nums){\n    let strNum = Math.abs(num).toString();\n    let firstDigit = parseInt(strNum[0]);\n    let lastDigit = parseInt(strNum[strNum.length - 1]);\n    if(num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && num % 2 != 0 && Math.floor(num / 10) % 2 != 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && num % 2 != 0 && Math.floor(num / 10) % 2 != 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10){\n      let numStr = Math.abs(nums[i]).toString();\n      let firstDigit = parseInt(numStr[0]);\n      let lastDigit = parseInt(numStr[numStr.length - 1]);\n      if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]);\n    if(num > 10 && num % 2 != 0 && Math.floor(num / 10) % 2 != 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let num of nums){\n    if(num > 10){\n      let strNum = num.toString();\n      let firstDigit = parseInt(strNum[0]);\n      let lastDigit = parseInt(strNum[strNum.length-1]);\n      if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let num of nums) {\n    if(num > 10) {\n      let strNum = num.toString();\n      let firstDigit = parseInt(strNum[0]);\n      let lastDigit = parseInt(strNum[strNum.length-1]);\n      if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"
    ],
    [
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n * (n + 1) / 2;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n * (n + 1) / 2;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}"
    ],
    [
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let uniqueNumbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  numbers.forEach((number) => {\n    if (!unique.includes(number)) {\n      unique.push(number);\n    }\n  });\n  return unique;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let uniqueNumbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  numbers.forEach((number) => {\n    if (!unique.includes(number)) {\n      unique.push(number);\n    }\n  });\n  return unique;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  return numbers.filter((value, index, self) => self.indexOf(value) === index);\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  return numbers.filter((value, index, self) => self.indexOf(value) === index);\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let uniqueNumbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i])){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let uniqueNumbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.indexOf(numbers[i], i + 1) === -1){\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n}"
    ],
    [
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for(let i = start; i <= end; i++) {\n    if(i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n  \n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n  \n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for(let i = start; i <= end; i++) {\n    if(i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  \n  return result;\n}",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  let result = [];\n  \n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}"
    ],
    [
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  return numbers.map(num => {\n    if (num > max) {\n      max = num;\n    }\n    return max;\n  });\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let maxArray = [];\n  let currentMax = numbers[0];\n  \n  for(let i=0; i<numbers.length; i++){\n    if(numbers[i] > currentMax){\n      currentMax = numbers[i];\n    }\n    maxArray.push(currentMax);\n  }\n  return maxArray;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let maxNum = numbers[0];\n  let result = [maxNum];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > maxNum){\n      maxNum = numbers[i];\n    }\n    result.push(maxNum);\n  }\n  return result;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let maxArray = [];\n  let maxNumber = numbers[0];\n  \n  for(let i=0; i<numbers.length; i++){\n    if(numbers[i] > maxNumber){\n      maxNumber = numbers[i];\n    }\n    maxArray.push(maxNumber);\n  }\n  \n  return maxArray;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let maxArray = [];\n  let maxNum = numbers[0];\n\n  for(let i = 0; i < numbers.length; i++) {\n    if(numbers[i] > maxNum) {\n      maxNum = numbers[i];\n    }\n    maxArray.push(maxNum);\n  }\n  \n  return maxArray;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let maxArray = [];\n  let max = numbers[0];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    maxArray.push(max);\n  }\n  return maxArray;\n}",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n}"
    ],
    [
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let operation of operations){\n    balance += operation;\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let operation of operations) {\n    balance += operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let operation of operations) {\n    balance += operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let operation of operations) {\n    balance += operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}"
    ],
    [
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let frequency = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (frequency[lst[i]]) {\n      frequency[lst[i]] += 1;\n    } else {\n      frequency[lst[i]] = 1;\n    }\n  }\n\n  let max = -1;\n  for (let key in frequency) {\n    if (frequency[key] >= key) {\n      max = Math.max(max, parseInt(key));\n    }\n  }\n\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let counts = {};\n  for(let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    counts[num] = (counts[num] || 0) + 1;\n  }\n\n  let max = -1;\n  for(let num in counts) {\n    if(counts[num] >= num && num > max) {\n      max = num;\n    }\n  }\n\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let freq = {};\n  for(let i of lst){\n    if(freq[i]){\n      freq[i]++;\n    } else {\n      freq[i] = 1;\n    }\n  }\n  \n  let max = -1;\n  for(let key in freq){\n    if(key <= freq[key] && key > max){\n      max = key;\n    }\n  }\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let count = {};\n  for(let i = 0; i < lst.length; i++){\n    if(count[lst[i]]) {\n      count[lst[i]]++;\n    } else {\n      count[lst[i]] = 1;\n    }\n  }\n\n  let max = -1;\n  for(let key in count){\n    if(count[key] >= key){\n      max = Math.max(max, parseInt(key));\n    }\n  }\n  \n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n  let max = -1;\n  for(let key in freq){\n    if(freq[key] >= key){\n      max = Math.max(max, parseInt(key));\n    }\n  }\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let freq = {};\n  for(let num of lst) {\n    if(freq[num]) {\n      freq[num]++;\n    } else {\n      freq[num] = 1;\n    }\n  }\n  \n  let maxNum = -1;\n  for(let num in freq) {\n    if(num <= freq[num] && num > maxNum) {\n      maxNum = num;\n    }\n  }\n  \n  return maxNum;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let count = {};\n  let max = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (!count[lst[i]]) {\n      count[lst[i]] = 1;\n    } else {\n      count[lst[i]]++;\n    }\n    \n    if (count[lst[i]] >= lst[i]) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  \n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let frequency = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (frequency[lst[i]]) {\n      frequency[lst[i]]++;\n    } else {\n      frequency[lst[i]] = 1;\n    }\n  }\n\n  let max = -1;\n  for (let key in frequency) {\n    if (frequency[key] >= key && key > max) {\n      max = key;\n    }\n  }\n\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let frequency = {};\n  for(let i = 0; i < lst.length; i++){\n    if(frequency[lst[i]]){\n      frequency[lst[i]] += 1;\n    } else {\n      frequency[lst[i]] = 1;\n    }\n  }\n  let max = -1;\n  for(let key in frequency){\n    if(frequency[key] >= key){\n      max = Math.max(max, Number(key));\n    }\n  }\n  return max;\n}",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let count = {};\n  for(let i = 0; i < lst.length; i++){\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  let max = -1;\n  for(let key in count){\n    if(count[key] >= key){\n      max = Math.max(max, parseInt(key));\n    }\n  }\n  return max;\n}"
    ],
    [
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let bracket of brackets) {\n    if (bracket === '(') {\n      balance++;\n    } else if (bracket === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      balance++;\n    } else if (brackets[i] === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      balance++;\n    } else if (brackets[i] === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      balance++;\n    } else if (brackets[i] === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let bracket of brackets) {\n    if (bracket === '(') {\n      balance++;\n    } else if (bracket === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == '(') {\n      balance++;\n    } else if (brackets[i] == ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance == 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] == '(') balance++;\n    if(brackets[i] == ')') balance--;\n    if(balance < 0) return false;\n  }\n  return balance == 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      balance++;\n    } else if (brackets[i] === \")\") {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let bracket of brackets) {\n    if (bracket === \"(\") {\n      balance++;\n    } else if (bracket === \")\") {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let bracket of brackets) {\n    if (bracket === '(') {\n      balance++;\n    } else if (bracket === ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}"
    ],
    [
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n  return l.map((val, index) => index % 2 === 0 ? evenIndices.shift() : val);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n  return l.map((value, index) => index % 2 === 0 ? evenIndices.shift() : value);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((val, i) => (i % 2 === 0 ? evenIndices.shift() : val));\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => i % 2 === 0 ? evenIndices.shift() : v);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => i % 2 === 0 ? evenIndices.shift() : v);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v));\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((val, i) => i % 2 === 0 ? evenIndices.shift() : val);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => i % 2 === 0 ? evenIndices.shift() : v);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n  return l.map((value, index) => index % 2 === 0 ? evenIndices.shift() : value);\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let evenIndexValues = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n  return l.map((value, index) => index % 2 === 0 ? evenIndexValues.shift() : value);\n}"
    ],
    [
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  \n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  const sortedS0 = s0.split('').sort().join('');\n  const sortedS1 = s1.split('').sort().join('');\n\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n  return sortedS0 === sortedS1;\n}"
    ],
    [
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      count++;\n    } else if (brackets[i] === '>') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === '<'){\n      count++;\n    } else if(brackets[i] === '>'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === '<'){\n      count++;\n    } else if(brackets[i] === '>'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let balance = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      balance++;\n    } else if (brackets[i] === '>') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push('<');\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push('<');\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      count++;\n    } else if (brackets[i] === '>') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === '<'){\n      count++;\n    } else if(brackets[i] === '>'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      count++;\n    } else if (brackets[i] === '>') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}"
    ]
]