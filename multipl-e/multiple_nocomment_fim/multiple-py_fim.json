[
  {
    "name": "SingleLineInfilling/HumanEval/23/L0",
    "canonical_solution": "    return len(string)\n",
    "prefix": "\n\ndef strlen(string: str) -> int:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/89/L0",
    "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n",
    "prefix": "\ndef encrypt(s):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
    "prompt": "\ndef encrypt(s):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/95/L17",
    "canonical_solution": "                    state = \"mixed\"\n",
    "prefix": "\ndef check_dict_case(dict):\n    \"\"\"-\"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    ",
    "suffix": "\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
    "prompt": "\ndef check_dict_case(dict):\n    \"\"\"-\"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/85/L0",
    "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
    "prefix": "\ndef add(lst):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef add(lst):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/140/L2",
    "canonical_solution": "    start, end = 0, 0\n",
    "prefix": "\ndef fix_spaces(text):\n    \"\"\"-\"\"\"\n    new_text = \"\"\n    i = 0\n    ",
    "suffix": "\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
    "prompt": "\ndef fix_spaces(text):\n    \"\"\"-\"\"\"\n    new_text = \"\"\n    i = 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/63/L4",
    "canonical_solution": "    if n == 2:\n",
    "prefix": "\n\ndef fibfib(n: int):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    ",
    "suffix": "\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
    "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/151/L0",
    "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
    "prefix": "\ndef double_the_difference(lst):\n    '''-'''\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef double_the_difference(lst):\n    '''-'''\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/22/L0",
    "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
    "prefix": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/41/L0",
    "canonical_solution": "    return n**2\n",
    "prefix": "\n\ndef car_race_collision(n: int):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/17/L1",
    "canonical_solution": "    return [note_map[x] for x in music_string.split(' ') if x]\n",
    "prefix": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"-\"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"-\"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/79/L0",
    "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
    "prefix": "\ndef decimal_to_binary(decimal):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/14/L3",
    "canonical_solution": "        result.append(string[:i+1])\n",
    "prefix": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"-\"\"\"\n    result = []\n\n    for i in range(len(string)):\n        ",
    "suffix": "\n    return result\n",
    "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"-\"\"\"\n    result = []\n\n    for i in range(len(string)):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/53/L0",
    "canonical_solution": "    return x + y\n",
    "prefix": "\n\ndef add(x: int, y: int):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/159/L1",
    "canonical_solution": "        return [ number + need , remaining-need ]\n",
    "prefix": "\ndef eat(number, need, remaining):\n    \"\"\"-\"\"\"\n    if(need <= remaining):\n        ",
    "suffix": "\n    else:\n        return [ number + remaining , 0]\n",
    "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"-\"\"\"\n    if(need <= remaining):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/115/L0",
    "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
    "prefix": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/160/L0",
    "canonical_solution": "    expression = str(operand[0])\n",
    "prefix": "\ndef do_algebra(operator, operand):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
    "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/27/L0",
    "canonical_solution": "    return string.swapcase()\n",
    "prefix": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/105/L2",
    "canonical_solution": "        2: \"Two\",\n",
    "prefix": "\ndef by_length(arr):\n    \"\"\"-\"\"\"\n    dic = {\n        1: \"One\",\n        ",
    "suffix": "\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
    "prompt": "\ndef by_length(arr):\n    \"\"\"-\"\"\"\n    dic = {\n        1: \"One\",\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/25/L12",
    "canonical_solution": "    return fact\n",
    "prefix": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"-\"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"-\"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/96/L4",
    "canonical_solution": "            if i % j == 0:\n",
    "prefix": "\ndef count_up_to(n):\n    \"\"\"-\"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            ",
    "suffix": "\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
    "prompt": "\ndef count_up_to(n):\n    \"\"\"-\"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/34/L0",
    "canonical_solution": "    return sorted(list(set(l)))\n",
    "prefix": "\n\ndef unique(l: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef unique(l: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/74/L11",
    "canonical_solution": "        return lst2\n",
    "prefix": "\ndef total_match(lst1, lst2):\n    '''-'''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        ",
    "suffix": "\n",
    "prompt": "\ndef total_match(lst1, lst2):\n    '''-'''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/35/L4",
    "canonical_solution": "    return m\n",
    "prefix": "\n\ndef max_element(l: list):\n    \"\"\"-\"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef max_element(l: list):\n    \"\"\"-\"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/132/L2",
    "canonical_solution": "    for i in range(len(string)):\n",
    "prefix": "\ndef is_nested(string):\n    '''-'''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    ",
    "suffix": "\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
    "prompt": "\ndef is_nested(string):\n    '''-'''\n    opening_bracket_index = []\n    closing_bracket_index = []\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/103/L5",
    "canonical_solution": "    return bin(round(summation/(m - n + 1)))\n",
    "prefix": "\ndef rounded_avg(n, m):\n    \"\"\"-\"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    ",
    "suffix": "\n",
    "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"-\"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/113/L1",
    "canonical_solution": "    for arr in lst:\n",
    "prefix": "\ndef odd_count(lst):\n    \"\"\"-\"\"\"\n    res = []\n    ",
    "suffix": "\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
    "prompt": "\ndef odd_count(lst):\n    \"\"\"-\"\"\"\n    res = []\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/109/L8",
    "canonical_solution": "    for i in range(len(arr)):\n",
    "prefix": "\ndef move_one_ball(arr):\n    \"\"\"-\"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    ",
    "suffix": "\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
    "prompt": "\ndef move_one_ball(arr):\n    \"\"\"-\"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/107/L11",
    "canonical_solution": "    return (even_palindrome_count, odd_palindrome_count)\n",
    "prefix": "\ndef even_odd_palindrome(n):\n    \"\"\"-\"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    ",
    "suffix": "\n",
    "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"-\"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/138/L0",
    "canonical_solution": "    return n%2 == 0 and n >= 8\n",
    "prefix": "\ndef is_equal_to_sum_even(n):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/62/L0",
    "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
    "prefix": "\n\ndef derivative(xs: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/126/L3",
    "canonical_solution": "    if any(count_digit[i] > 2 for i in lst):\n",
    "prefix": "\ndef is_sorted(lst):\n    '''-'''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    ",
    "suffix": "\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
    "prompt": "\ndef is_sorted(lst):\n    '''-'''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/161/L10",
    "canonical_solution": "        s += i\n",
    "prefix": "\ndef solve(s):\n    \"\"\"-\"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        ",
    "suffix": "\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
    "prompt": "\ndef solve(s):\n    \"\"\"-\"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/130/L8",
    "canonical_solution": "    return my_tri\n",
    "prefix": "\ndef tri(n):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    ",
    "suffix": "\n",
    "prompt": "\ndef tri(n):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/36/L7",
    "canonical_solution": "        ans += (c == '7')\n",
    "prefix": "\n\ndef fizz_buzz(n: int):\n    \"\"\"-\"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ",
    "suffix": "\n    return ans\n",
    "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"-\"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/29/L0",
    "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
    "prefix": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/84/L0",
    "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
    "prefix": "\ndef solve(N):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef solve(N):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/129/L25",
    "canonical_solution": "            ans.append(val)\n",
    "prefix": "\ndef minPath(grid, k):\n    \"\"\"-\"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ",
    "suffix": "\n    return ans\n",
    "prompt": "\ndef minPath(grid, k):\n    \"\"\"-\"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/98/L1",
    "canonical_solution": "    for i in range(0,len(s),2):\n",
    "prefix": "\ndef count_upper(s):\n    \"\"\"-\"\"\"\n    count = 0\n    ",
    "suffix": "\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
    "prompt": "\ndef count_upper(s):\n    \"\"\"-\"\"\"\n    count = 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/120/L1",
    "canonical_solution": "        return []\n",
    "prefix": "\ndef maximum(arr, k):\n    \"\"\"-\"\"\"\n    if k == 0:\n        ",
    "suffix": "\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
    "prompt": "\ndef maximum(arr, k):\n    \"\"\"-\"\"\"\n    if k == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/24/L0",
    "canonical_solution": "    for i in reversed(range(n)):\n",
    "prefix": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        if n % i == 0:\n            return i\n",
    "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/88/L0",
    "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
    "prefix": "\ndef sort_array(array):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef sort_array(array):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/106/L5",
    "canonical_solution": "            ret += [x]\n",
    "prefix": "\ndef f(n):\n    \"\"\"-\"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ",
    "suffix": "\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
    "prompt": "\ndef f(n):\n    \"\"\"-\"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/77/L0",
    "canonical_solution": "    a = abs(a)\n",
    "prefix": "\ndef iscube(a):\n    '''-'''\n\n    ",
    "suffix": "\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
    "prompt": "\ndef iscube(a):\n    '''-'''\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/93/L3",
    "canonical_solution": "    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
    "prefix": "\ndef encode(message):\n    \"\"\"-\"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    ",
    "suffix": "\n",
    "prompt": "\ndef encode(message):\n    \"\"\"-\"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/91/L2",
    "canonical_solution": "    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
    "prefix": "\ndef is_bored(S):\n    \"\"\"-\"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    ",
    "suffix": "\n",
    "prompt": "\ndef is_bored(S):\n    \"\"\"-\"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/43/L3",
    "canonical_solution": "                return True\n",
    "prefix": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"-\"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                ",
    "suffix": "\n    return False\n",
    "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"-\"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/71/L0",
    "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n",
    "prefix": "\ndef triangle_area(a, b, c):\n    '''-'''\n\n    ",
    "suffix": "\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
    "prompt": "\ndef triangle_area(a, b, c):\n    '''-'''\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/148/L1",
    "canonical_solution": "    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n",
    "prefix": "\ndef bf(planet1, planet2):\n    '''-'''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    ",
    "suffix": "\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
    "prompt": "\ndef bf(planet1, planet2):\n    '''-'''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/131/L9",
    "canonical_solution": "    else:\n",
    "prefix": "\ndef digits(n):\n    \"\"\"-\"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    ",
    "suffix": "\n        return product\n",
    "prompt": "\ndef digits(n):\n    \"\"\"-\"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/101/L9",
    "canonical_solution": "            s_list.append(letter)\n",
    "prefix": "\ndef words_string(s):\n    \"\"\"-\"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            ",
    "suffix": "\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
    "prompt": "\ndef words_string(s):\n    \"\"\"-\"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/18/L6",
    "canonical_solution": "    return times\n",
    "prefix": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"-\"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"-\"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/137/L4",
    "canonical_solution": "    return a if float(temp_a) > float(temp_b) else b \n",
    "prefix": "\ndef compare_one(a, b):\n    \"\"\"-\"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    ",
    "suffix": "\n",
    "prompt": "\ndef compare_one(a, b):\n    \"\"\"-\"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/51/L0",
    "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
    "prefix": "\n\ndef remove_vowels(text):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/70/L3",
    "canonical_solution": "        lst.remove(res[-1])\n",
    "prefix": "\ndef strange_sort_list(lst):\n    '''-'''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        ",
    "suffix": "\n        switch = not switch\n    return res\n",
    "prompt": "\ndef strange_sort_list(lst):\n    '''-'''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/20/L13",
    "canonical_solution": "                        closest_pair = tuple(sorted([elem, elem2]))\n",
    "prefix": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"-\"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        ",
    "suffix": "\n\n    return closest_pair\n",
    "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"-\"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/76/L2",
    "canonical_solution": "    power = 1\n",
    "prefix": "\ndef is_simple_power(x, n):\n    \"\"\"-\"\"\"\n    if (n == 1): \n        return (x == 1) \n    ",
    "suffix": "\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
    "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"-\"\"\"\n    if (n == 1): \n        return (x == 1) \n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/39/L0",
    "canonical_solution": "    import math\n",
    "prefix": "\n\ndef prime_fib(n: int):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
    "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/145/L0",
    "canonical_solution": "    def digits_sum(n):\n",
    "prefix": "\ndef order_by_points(nums):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
    "prompt": "\ndef order_by_points(nums):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/0/L7",
    "canonical_solution": "    return False\n",
    "prefix": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"-\"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"-\"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/10/L6",
    "canonical_solution": "        beginning_of_suffix += 1\n",
    "prefix": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"-\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"-\"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        ",
    "suffix": "\n\n    return string + string[:beginning_of_suffix][::-1]\n",
    "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"-\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"-\"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/11/L1",
    "canonical_solution": "        if i == j:\n",
    "prefix": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"-\"\"\"\n    def xor(i, j):\n        ",
    "suffix": "\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
    "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"-\"\"\"\n    def xor(i, j):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/139/L3",
    "canonical_solution": "        fact_i *= i\n",
    "prefix": "\ndef special_factorial(n):\n    \"\"\"-\"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        ",
    "suffix": "\n        special_fact *= fact_i\n    return special_fact\n",
    "prompt": "\ndef special_factorial(n):\n    \"\"\"-\"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/122/L0",
    "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
    "prefix": "\ndef add_elements(arr, k):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef add_elements(arr, k):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/46/L8",
    "canonical_solution": "    return results[-1]\n",
    "prefix": "\n\ndef fib4(n: int):\n    \"\"\"-\"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef fib4(n: int):\n    \"\"\"-\"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/104/L2",
    "canonical_solution": "        if all (int(c) % 2 == 1 for c in str(i)):\n",
    "prefix": "\ndef unique_digits(x):\n    \"\"\"-\"\"\"\n    odd_digit_elements = []\n    for i in x:\n        ",
    "suffix": "\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
    "prompt": "\ndef unique_digits(x):\n    \"\"\"-\"\"\"\n    odd_digit_elements = []\n    for i in x:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/117/L1",
    "canonical_solution": "    for word in s.split():\n",
    "prefix": "\ndef select_words(s, n):\n    \"\"\"-\"\"\"\n    result = []\n    ",
    "suffix": "\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
    "prompt": "\ndef select_words(s, n):\n    \"\"\"-\"\"\"\n    result = []\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/72/L7",
    "canonical_solution": "        i+=1\n",
    "prefix": "\ndef will_it_fly(q,w):\n    '''-'''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        ",
    "suffix": "\n        j-=1\n    return True\n",
    "prompt": "\ndef will_it_fly(q,w):\n    '''-'''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/55/L4",
    "canonical_solution": "    return fib(n - 1) + fib(n - 2)\n",
    "prefix": "\n\ndef fib(n: int):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"-\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/153/L9",
    "canonical_solution": "    return ans\n",
    "prefix": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"-\"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    ",
    "suffix": "\n\n",
    "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"-\"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/119/L5",
    "canonical_solution": "            else:\n",
    "prefix": "\ndef match_parens(lst):\n    '''-'''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            ",
    "suffix": "\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
    "prompt": "\ndef match_parens(lst):\n    '''-'''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/90/L0",
    "canonical_solution": "    lst = sorted(set(lst))\n",
    "prefix": "\ndef next_smallest(lst):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    return None if len(lst) < 2 else lst[1]\n",
    "prompt": "\ndef next_smallest(lst):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/92/L5",
    "canonical_solution": "    return False\n",
    "prefix": "\ndef any_int(x, y, z):\n    '''-'''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    ",
    "suffix": "\n",
    "prompt": "\ndef any_int(x, y, z):\n    '''-'''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/2/L0",
    "canonical_solution": "    return number % 1.0\n",
    "prefix": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/42/L0",
    "canonical_solution": "    return [(e + 1) for e in l]\n",
    "prefix": "\n\ndef incr_list(l: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/150/L3",
    "canonical_solution": "        if n % i == 0:\n",
    "prefix": "\ndef x_or_y(n, x, y):\n    \"\"\"-\"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        ",
    "suffix": "\n            return y\n            break\n    else:\n        return x\n",
    "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"-\"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/49/L2",
    "canonical_solution": "        ret = (2 * ret) % p\n",
    "prefix": "\n\ndef modp(n: int, p: int):\n    \"\"\"-\"\"\"\n    ret = 1\n    for i in range(n):\n        ",
    "suffix": "\n    return ret\n",
    "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"-\"\"\"\n    ret = 1\n    for i in range(n):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/155/L1",
    "canonical_solution": "    odd_count = 0\n",
    "prefix": "\ndef even_odd_count(num):\n    \"\"\"-\"\"\"\n    even_count = 0\n    ",
    "suffix": "\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
    "prompt": "\ndef even_odd_count(num):\n    \"\"\"-\"\"\"\n    even_count = 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/80/L0",
    "canonical_solution": "    if len(s) < 3:\n",
    "prefix": "\ndef is_happy(s):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
    "prompt": "\ndef is_happy(s):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/59/L5",
    "canonical_solution": "                return False\n",
    "prefix": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"-\"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                ",
    "suffix": "\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
    "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"-\"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/66/L1",
    "canonical_solution": "    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
    "prefix": "\ndef digitSum(s):\n    \"\"\"-\"\"\"\n    if s == \"\": return 0\n    ",
    "suffix": "\n",
    "prompt": "\ndef digitSum(s):\n    \"\"\"-\"\"\"\n    if s == \"\": return 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/21/L2",
    "canonical_solution": "    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
    "prefix": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"-\"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"-\"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/121/L0",
    "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
    "prefix": "\ndef solution(lst):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef solution(lst):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/68/L1",
    "canonical_solution": "    evens = list(filter(lambda x: x%2 == 0, arr))\n",
    "prefix": "\ndef pluck(arr):\n    \"\"\"-\"\"\"\n    if(len(arr) == 0): return []\n    ",
    "suffix": "\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
    "prompt": "\ndef pluck(arr):\n    \"\"\"-\"\"\"\n    if(len(arr) == 0): return []\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/147/L2",
    "canonical_solution": "    for i in range(n):\n",
    "prefix": "\ndef get_max_triples(n):\n    \"\"\"-\"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    ",
    "suffix": "\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
    "prompt": "\ndef get_max_triples(n):\n    \"\"\"-\"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/110/L9",
    "canonical_solution": "        return \"YES\"\n",
    "prefix": "\ndef exchange(lst1, lst2):\n    \"\"\"-\"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        ",
    "suffix": "\n    return \"NO\"\n            \n",
    "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"-\"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/47/L2",
    "canonical_solution": "        return l[len(l) // 2]\n",
    "prefix": "\n\ndef median(l: list):\n    \"\"\"-\"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        ",
    "suffix": "\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
    "prompt": "\n\ndef median(l: list):\n    \"\"\"-\"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/82/L5",
    "canonical_solution": "            return False\n",
    "prefix": "\ndef prime_length(string):\n    \"\"\"-\"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            ",
    "suffix": "\n    return True\n",
    "prompt": "\ndef prime_length(string):\n    \"\"\"-\"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/73/L2",
    "canonical_solution": "        if arr[i] != arr[len(arr) - i - 1]:\n",
    "prefix": "\ndef smallest_change(arr):\n    \"\"\"-\"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        ",
    "suffix": "\n            ans += 1\n    return ans\n",
    "prompt": "\ndef smallest_change(arr):\n    \"\"\"-\"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/133/L0",
    "canonical_solution": "    import math\n",
    "prefix": "\n\ndef sum_squares(lst):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
    "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/141/L5",
    "canonical_solution": "        return 'No'\n",
    "prefix": "\ndef file_name_check(file_name):\n    \"\"\"-\"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        ",
    "suffix": "\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
    "prompt": "\ndef file_name_check(file_name):\n    \"\"\"-\"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/40/L4",
    "canonical_solution": "                    return True\n",
    "prefix": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"-\"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    ",
    "suffix": "\n    return False\n",
    "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"-\"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/127/L0",
    "canonical_solution": "    def is_prime(num):\n",
    "prefix": "\ndef intersection(interval1, interval2):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
    "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/1/L7",
    "canonical_solution": "            current_string.append(c)\n",
    "prefix": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"-\"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            ",
    "suffix": "\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
    "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"-\"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/152/L0",
    "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
    "prefix": "\ndef compare(game,guess):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef compare(game,guess):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/83/L1",
    "canonical_solution": "    return 18 * (10 ** (n - 2))\n",
    "prefix": "\ndef starts_one_ends(n):\n    \"\"\"-\"\"\"\n    if n == 1: return 1\n    ",
    "suffix": "\n",
    "prompt": "\ndef starts_one_ends(n):\n    \"\"\"-\"\"\"\n    if n == 1: return 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/134/L1",
    "canonical_solution": "    check = txt.split(' ')[-1]\n",
    "prefix": "\ndef check_if_last_char_is_a_letter(txt):\n    '''-'''\n \n    ",
    "suffix": "\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
    "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''-'''\n \n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/124/L1",
    "canonical_solution": "        date = date.strip()\n",
    "prefix": "\ndef valid_date(date):\n    \"\"\"-\"\"\"\n    try:\n        ",
    "suffix": "\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
    "prompt": "\ndef valid_date(date):\n    \"\"\"-\"\"\"\n    try:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/108/L0",
    "canonical_solution": "    def digits_sum(n):\n",
    "prefix": "\ndef count_nums(arr):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
    "prompt": "\ndef count_nums(arr):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/86/L0",
    "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
    "prefix": "\ndef anti_shuffle(s):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef anti_shuffle(s):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/48/L1",
    "canonical_solution": "        if text[i] != text[len(text) - 1 - i]:\n",
    "prefix": "\n\ndef is_palindrome(text: str):\n    \"\"\"-\"\"\"\n    for i in range(len(text)):\n        ",
    "suffix": "\n            return False\n    return True\n",
    "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"-\"\"\"\n    for i in range(len(text)):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/118/L4",
    "canonical_solution": "    for i in range(len(word)-2, 0, -1):\n",
    "prefix": "\ndef get_closest_vowel(word):\n    \"\"\"-\"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    ",
    "suffix": "\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
    "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"-\"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/31/L3",
    "canonical_solution": "        if n % k == 0:\n",
    "prefix": "\n\ndef is_prime(n):\n    \"\"\"-\"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        ",
    "suffix": "\n            return False\n    return True\n",
    "prompt": "\n\ndef is_prime(n):\n    \"\"\"-\"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/144/L4",
    "canonical_solution": "    if (numerator/denom == int(numerator/denom)):\n",
    "prefix": "\ndef simplify(x, n):\n    \"\"\"-\"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    ",
    "suffix": "\n        return True\n    return False\n",
    "prompt": "\ndef simplify(x, n):\n    \"\"\"-\"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/78/L1",
    "canonical_solution": "    total = 0\n",
    "prefix": "\ndef hex_key(num):\n    \"\"\"-\"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    ",
    "suffix": "\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
    "prompt": "\ndef hex_key(num):\n    \"\"\"-\"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/143/L0",
    "canonical_solution": "    new_lst = []\n",
    "prefix": "\ndef words_in_sentence(sentence):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
    "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/111/L12",
    "canonical_solution": "    return dict1\n",
    "prefix": "\ndef histogram(test):\n    \"\"\"-\"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    ",
    "suffix": "\n",
    "prompt": "\ndef histogram(test):\n    \"\"\"-\"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/87/L0",
    "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n",
    "prefix": "\ndef get_row(lst, x):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
    "prompt": "\ndef get_row(lst, x):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/123/L0",
    "canonical_solution": "    if n%2==0:\n",
    "prefix": "\ndef get_odd_collatz(n):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
    "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/135/L5",
    "canonical_solution": "      i+=1\n",
    "prefix": "\ndef can_arrange(arr):\n    \"\"\"-\"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      ",
    "suffix": "\n    return ind\n",
    "prompt": "\ndef can_arrange(arr):\n    \"\"\"-\"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/19/L11",
    "canonical_solution": "    }\n",
    "prefix": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"-\"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    ",
    "suffix": "\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
    "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"-\"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/65/L0",
    "canonical_solution": "    s = str(x)\n",
    "prefix": "\ndef circular_shift(x, shift):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
    "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/142/L1",
    "canonical_solution": "    for i in range(len(lst)):\n",
    "prefix": "\n\n\ndef sum_squares(lst):\n    \"\"\"-\"\"\"\n    result =[]\n    ",
    "suffix": "\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
    "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"-\"\"\"\n    result =[]\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/94/L12",
    "canonical_solution": "    result = sum(int(digit) for digit in str(maxx))\n",
    "prefix": "\n\ndef skjkasdkd(lst):\n    \"\"\"-\"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    ",
    "suffix": "\n    return result\n\n",
    "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"-\"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/8/L4",
    "canonical_solution": "        sum_value += n\n",
    "prefix": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"-\"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        ",
    "suffix": "\n        prod_value *= n\n    return sum_value, prod_value\n",
    "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"-\"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/102/L3",
    "canonical_solution": "        return y\n",
    "prefix": "\ndef choose_num(x, y):\n    \"\"\"-\"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        ",
    "suffix": "\n    if x == y:\n        return -1\n    return y - 1\n",
    "prompt": "\ndef choose_num(x, y):\n    \"\"\"-\"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/136/L0",
    "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n",
    "prefix": "\ndef largest_smallest_integers(lst):\n    '''-'''\n\n    ",
    "suffix": "\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
    "prompt": "\ndef largest_smallest_integers(lst):\n    '''-'''\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/16/L0",
    "canonical_solution": "    return len(set(string.lower()))\n",
    "prefix": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/100/L0",
    "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
    "prefix": "\ndef make_a_pile(n):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef make_a_pile(n):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/128/L2",
    "canonical_solution": "    return prod * sum([abs(i) for i in arr])\n",
    "prefix": "\ndef prod_signs(arr):\n    \"\"\"-\"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    ",
    "suffix": "\n",
    "prompt": "\ndef prod_signs(arr):\n    \"\"\"-\"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/114/L3",
    "canonical_solution": "        s += -num\n",
    "prefix": "\ndef minSubArraySum(nums):\n    \"\"\"-\"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        ",
    "suffix": "\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
    "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"-\"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/15/L0",
    "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
    "prefix": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/154/L3",
    "canonical_solution": "        for j in range(l + 1):\n",
    "prefix": "\ndef cycpattern_check(a , b):\n    \"\"\"-\"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        ",
    "suffix": "\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
    "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"-\"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/57/L0",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n",
    "prefix": "\n\ndef monotonic(l: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        return True\n    return False\n",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/12/L5",
    "canonical_solution": "        if len(s) == maxlen:\n",
    "prefix": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"-\"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        ",
    "suffix": "\n            return s\n",
    "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"-\"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/52/L1",
    "canonical_solution": "        if e >= t:\n",
    "prefix": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"-\"\"\"\n    for e in l:\n        ",
    "suffix": "\n            return False\n    return True\n",
    "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"-\"\"\"\n    for e in l:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/75/L3",
    "canonical_solution": "                return False\n",
    "prefix": "\ndef is_multiply_prime(a):\n    \"\"\"-\"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                ",
    "suffix": "\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
    "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"-\"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/30/L0",
    "canonical_solution": "    return [e for e in l if e > 0]\n",
    "prefix": "\n\ndef get_positive(l: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/33/L2",
    "canonical_solution": "    return l\n",
    "prefix": "\n\ndef sort_third(l: list):\n    \"\"\"-\"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"-\"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/6/L6",
    "canonical_solution": "                max_depth = max(depth, max_depth)\n",
    "prefix": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"-\"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                ",
    "suffix": "\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
    "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"-\"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/45/L0",
    "canonical_solution": "    return a * h / 2.0\n",
    "prefix": "\n\ndef triangle_area(a, h):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/97/L0",
    "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
    "prefix": "\ndef multiply(a, b):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef multiply(a, b):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/4/L1",
    "canonical_solution": "    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
    "prefix": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"-\"\"\"\n    mean = sum(numbers) / len(numbers)\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"-\"\"\"\n    mean = sum(numbers) / len(numbers)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/58/L0",
    "canonical_solution": "    ret = set()\n",
    "prefix": "\n\ndef common(l1: list, l2: list):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
    "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/156/L13",
    "canonical_solution": "    return res.lower()\n",
    "prefix": "\ndef int_to_mini_roman(number):\n    \"\"\"-\"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    ",
    "suffix": "\n",
    "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"-\"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/67/L4",
    "canonical_solution": "    return n - sum(lis)\n",
    "prefix": "\ndef fruit_distribution(s,n):\n    \"\"\"-\"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    ",
    "suffix": "\n",
    "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"-\"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/112/L1",
    "canonical_solution": "    return (s,s[::-1] == s)\n",
    "prefix": "\ndef reverse_delete(s,c):\n    \"\"\"-\"\"\"\n    s = ''.join([char for char in s if char not in c])\n    ",
    "suffix": "\n",
    "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"-\"\"\"\n    s = ''.join([char for char in s if char not in c])\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/13/L0",
    "canonical_solution": "    while b:\n",
    "prefix": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n        a, b = b, a % b\n    return a\n",
    "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/125/L1",
    "canonical_solution": "        return txt.split()\n",
    "prefix": "\ndef split_words(txt):\n    '''-'''\n    if \" \" in txt:\n        ",
    "suffix": "\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
    "prompt": "\ndef split_words(txt):\n    '''-'''\n    if \" \" in txt:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/116/L0",
    "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
    "prefix": "\ndef sort_array(arr):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef sort_array(arr):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/28/L0",
    "canonical_solution": "    return ''.join(strings)\n",
    "prefix": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/149/L3",
    "canonical_solution": "        if len(i)%2 == 0:\n",
    "prefix": "\ndef sorted_list_sum(lst):\n    \"\"\"-\"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        ",
    "suffix": "\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
    "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"-\"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/7/L0",
    "canonical_solution": "    return [x for x in strings if substring in x]\n",
    "prefix": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/99/L15",
    "canonical_solution": "    else:\n",
    "prefix": "\ndef closest_integer(value):\n    '''-'''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # -\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    ",
    "suffix": "\n        res = 0\n\n    return res\n\n",
    "prompt": "\ndef closest_integer(value):\n    '''-'''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # -\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/64/L2",
    "canonical_solution": "    if s[-1] == 'y' or s[-1] == 'Y':\n",
    "prefix": "\nFIX = \"\"\"-\"\"\"\n\ndef vowels_count(s):\n    \"\"\"-\"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    ",
    "suffix": "\n        n_vowels += 1\n    return n_vowels\n",
    "prompt": "\nFIX = \"\"\"-\"\"\"\n\ndef vowels_count(s):\n    \"\"\"-\"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/158/L0",
    "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
    "prefix": "\ndef find_max(words):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef find_max(words):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/162/L1",
    "canonical_solution": "    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
    "prefix": "\ndef string_to_md5(text):\n    \"\"\"-\"\"\"\n    import hashlib\n    ",
    "suffix": "\n",
    "prompt": "\ndef string_to_md5(text):\n    \"\"\"-\"\"\"\n    import hashlib\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/44/L0",
    "canonical_solution": "    ret = \"\"\n",
    "prefix": "\n\ndef change_base(x: int, base: int):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
    "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/157/L0",
    "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
    "prefix": "\ndef right_angle_triangle(a, b, c):\n    '''-'''\n\n    ",
    "suffix": "\n",
    "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''-'''\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/81/L21",
    "canonical_solution": "            letter_grade.append(\"C-\")\n",
    "prefix": "\ndef numerical_letter_grade(grades):\n    \"\"\"-\"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            ",
    "suffix": "\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
    "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"-\"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/5/L11",
    "canonical_solution": "    return result\n",
    "prefix": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"-\"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    ",
    "suffix": "\n",
    "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"-\"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/146/L4",
    "canonical_solution": "            odd_digits = (1, 3, 5, 7, 9)\n",
    "prefix": "\ndef specialFilter(nums):\n    \"\"\"-\"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            ",
    "suffix": "\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
    "prompt": "\ndef specialFilter(nums):\n    \"\"\"-\"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/60/L0",
    "canonical_solution": "    return sum(range(n + 1))\n",
    "prefix": "\n\ndef sum_to_n(n: int):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/26/L0",
    "canonical_solution": "    import collections\n",
    "prefix": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
    "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/163/L1",
    "canonical_solution": "    upper = min(8, max(a, b))\n",
    "prefix": "\ndef generate_integers(a, b):\n    \"\"\"-\"\"\"\n    lower = max(2, min(a, b))\n    ",
    "suffix": "\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
    "prompt": "\ndef generate_integers(a, b):\n    \"\"\"-\"\"\"\n    lower = max(2, min(a, b))\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/9/L6",
    "canonical_solution": "        else:\n",
    "prefix": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"-\"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        ",
    "suffix": "\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
    "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"-\"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/3/L0",
    "canonical_solution": "    balance = 0\n",
    "prefix": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
    "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/69/L5",
    "canonical_solution": "    for i in range(1, len(frq)):\n",
    "prefix": "\ndef search(lst):\n    '''-'''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    ",
    "suffix": "\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
    "prompt": "\ndef search(lst):\n    '''-'''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/61/L1",
    "canonical_solution": "    for b in brackets:\n",
    "prefix": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"-\"\"\"\n    depth = 0\n    ",
    "suffix": "\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"-\"\"\"\n    depth = 0\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/37/L7",
    "canonical_solution": "        ans.append(evens[-1])\n",
    "prefix": "\n\ndef sort_even(l: list):\n    \"\"\"-\"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ",
    "suffix": "\n    return ans\n",
    "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"-\"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/54/L0",
    "canonical_solution": "    return set(s0) == set(s1)\n",
    "prefix": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"-\"\"\"\n\n    ",
    "suffix": "\n",
    "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"-\"\"\"\n\n"
  },
  {
    "name": "SingleLineInfilling/HumanEval/56/L7",
    "canonical_solution": "            return False\n",
    "prefix": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"-\"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            ",
    "suffix": "\n    return depth == 0\n",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"-\"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n"
  }
]